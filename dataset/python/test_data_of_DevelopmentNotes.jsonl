{"comment_sentence_id": 1585, "class": "BooleanArray", "comment_sentence": "booleanarray is considered experimental.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "booleanarray is considered experimental", "final_sentence": "booleanarray is considered experimental"}
{"comment_sentence_id": 3731, "class": "Request", "comment_sentence": "used to prepare a class preparedrequest preparedrequest , which is sent to the server.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "used to prepare a class preparedrequest preparedrequest which is sent to the server", "final_sentence": "used to prepare a class preparedrequest preparedrequest which is sent to the server"}
{"comment_sentence_id": 4472, "class": "BCEWithLogitsLoss", "comment_sentence": "default mean , then", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "default mean then", "final_sentence": "default mean then"}
{"comment_sentence_id": 608, "class": "MultiValueDict", "comment_sentence": "d^get lastname , nonexistent", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "d get lastname nonexistent", "final_sentence": "d get lastname nonexistent"}
{"comment_sentence_id": 3256, "class": "NotAny", "comment_sentence": "input string, it only verifies that the specified parse expression", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "input string it only verifies that the specified parse expression", "final_sentence": "input string it only verifies that the specified parse expression"}
{"comment_sentence_id": 5260, "class": "LBFGS", "comment_sentence": "default 20", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "default 20", "final_sentence": "default 20"}
{"comment_sentence_id": 2054, "class": "PlotAccessor", "comment_sentence": "from 0 left bottom end to 1 right top end .", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "from 0 left bottom end to 1 right top end", "final_sentence": "from 0 left bottom end to 1 right top end"}
{"comment_sentence_id": 1148, "class": "Struct", "comment_sentence": "intelligent merging.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "intelligent merging", "final_sentence": "intelligent merging"}
{"comment_sentence_id": 4247, "class": "Adam", "comment_sentence": "weight decay float, optional weight decay l2 penalty default 0", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "weight decay float optional weight decay l2 penalty default 0", "final_sentence": "weight decay float optional weight decay l2 penalty default 0"}
{"comment_sentence_id": 1603, "class": "BooleanArray", "comment_sentence": "create an booleanarray with func pandas^array", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "create an booleanarray with func pandas array", "final_sentence": "create an booleanarray with func pandas array"}
{"comment_sentence_id": 2446, "class": "CaseInsensitiveDict", "comment_sentence": "the structure remembers the", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "the structure remembers the", "final_sentence": "the structure remembers the"}
{"comment_sentence_id": 4367, "class": "BatchNorm1d", "comment_sentence": "mathematically, the", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "mathematically the", "final_sentence": "mathematically the"}
{"comment_sentence_id": 1718, "class": "CategoricalIndex", "comment_sentence": "if the categories are not given here and also not in dtype , they", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "if the categories are not given here and also not in dtype they", "final_sentence": "if the categories are not given here and also not in dtype they"}
{"comment_sentence_id": 551, "class": "MigrationLoader", "comment_sentence": "disk, then they are injected into the main set, replacing the named migrations.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "disk then they are injected into the main set replacing the named migrations", "final_sentence": "disk then they are injected into the main set replacing the named migrations"}
{"comment_sentence_id": 2075, "class": "PlotAccessor", "comment_sentence": "for instance, matplotlib .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "for instance matplotlib", "final_sentence": "for instance matplotlib"}
{"comment_sentence_id": 5373, "class": "MultiLabelMarginLoss", "comment_sentence": "y torch^longtensor 3, 0, 1, 1", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "y torch longtensor 3 0 1 1", "final_sentence": "y torch longtensor 3 0 1 1"}
{"comment_sentence_id": 23, "class": "Atomic", "comment_sentence": "and rolls back the transaction or to the savepoint on exceptions.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "and rolls back the transaction or to the savepoint on exceptions", "final_sentence": "and rolls back the transaction or to the savepoint on exceptions"}
{"comment_sentence_id": 598, "class": "MultiValueDict", "comment_sentence": "a subclass of dictionary customized to handle multiple values for the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a subclass of dictionary customized to handle multiple values for the", "final_sentence": "a subclass of dictionary customized to handle multiple values for the"}
{"comment_sentence_id": 3182, "class": "MemcachedBytecodeCache", "comment_sentence": "if timeout is not provided", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "if timeout is not provided", "final_sentence": "if timeout is not provided"}
{"comment_sentence_id": 2235, "class": "SQLTable", "comment_sentence": "uses fact that table is reflected by sqlalchemy to", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "uses fact that table is reflected by sqlalchemy to", "final_sentence": "uses fact that table is reflected by sqlalchemy to"}
{"comment_sentence_id": 2051, "class": "PlotAccessor", "comment_sentence": "plots .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "plots", "final_sentence": "plots"}
{"comment_sentence_id": 5213, "class": "ExternalInitializer", "comment_sentence": "executed.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "executed", "final_sentence": "executed"}
{"comment_sentence_id": 582, "class": "MigrationWriter", "comment_sentence": "take a migration instance and is able to produce the contents", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "take a migration instance and is able to produce the contents", "final_sentence": "take a migration instance and is able to produce the contents"}
{"comment_sentence_id": 4464, "class": "BCEWithLogitsLoss", "comment_sentence": "we take advantage of the log sum exp trick for numerical stability.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "we take advantage of the log sum exp trick for numerical stability", "final_sentence": "we take advantage of the log sum exp trick for numerical stability"}
{"comment_sentence_id": 3073, "class": "Markup", "comment_sentence": "document, either because it was escaped or because it was marked", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "document either because it was escaped or because it was marked", "final_sentence": "document either because it was escaped or because it was marked"}
{"comment_sentence_id": 654, "class": "MultiWidget", "comment_sentence": "a widget that is composed of multiple widgets.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a widget that is composed of multiple widgets", "final_sentence": "a widget that is composed of multiple widgets"}
{"comment_sentence_id": 1133, "class": "MyFrame", "comment_sentence": "it just shows a few controls on a wxpanel,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "it just shows a few controls on a wxpanel", "final_sentence": "it just shows a few controls on a wxpanel"}
{"comment_sentence_id": 1880, "class": "IntegerArray", "comment_sentence": "data contains a numpy integer array of the appropriate dtype", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "data contains a numpy integer array of the appropriate dtype", "final_sentence": "data contains a numpy integer array of the appropriate dtype"}
{"comment_sentence_id": 21, "class": "Atomic", "comment_sentence": "savepoint, depending on whether a transaction is already in progress, and", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "savepoint depending on whether a transaction is already in progress and", "final_sentence": "savepoint depending on whether a transaction is already in progress and"}
{"comment_sentence_id": 1655, "class": "CategoricalDtype", "comment_sentence": "categories", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "categories", "final_sentence": "categories"}
{"comment_sentence_id": 5354, "class": "MultiLabelMarginLoss", "comment_sentence": "reduction string, optional specifies the reduction to apply to the output", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "reduction string optional specifies the reduction to apply to the output", "final_sentence": "reduction string optional specifies the reduction to apply to the output"}
{"comment_sentence_id": 3268, "class": "NotAny", "comment_sentence": "# very crude boolean expression to support parenthesis groups and", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "very crude boolean expression to support parenthesis groups and", "final_sentence": "very crude boolean expression to support parenthesis groups and"}
{"comment_sentence_id": 912, "class": "Audio", "comment_sentence": "create an audio object.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "create an audio object", "final_sentence": "create an audio object"}
{"comment_sentence_id": 1138, "class": "Obj", "comment_sentence": "namespace to hold arbitrary information.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "namespace to hold arbitrary information", "final_sentence": "namespace to hold arbitrary information"}
{"comment_sentence_id": 4212, "class": "Adadelta", "comment_sentence": "implements adadelta algorithm.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "implements adadelta algorithm", "final_sentence": "implements adadelta algorithm"}
{"comment_sentence_id": 3512, "class": "ParseResults", "comment_sentence": "resultsname see class parserelement^setresultsname", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "resultsname see class parserelement setresultsname", "final_sentence": "resultsname see class parserelement setresultsname"}
{"comment_sentence_id": 2326, "class": "StringMethods", "comment_sentence": "methods, with some inspiration from r s stringr package.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "methods with some inspiration from r s stringr package", "final_sentence": "methods with some inspiration from r s stringr package"}
{"comment_sentence_id": 2452, "class": "CaseInsensitiveDict", "comment_sentence": "cid caseinsensitivedict", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "cid caseinsensitivedict", "final_sentence": "cid caseinsensitivedict"}
{"comment_sentence_id": 2495, "class": "CONSOLE_SCREEN_BUFFER_INFO", "comment_sentence": "struct in wincon^h.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "struct in wincon h", "final_sentence": "struct in wincon h"}
{"comment_sentence_id": 3406, "class": "Option", "comment_sentence": "hidden from the user.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "hidden from the user", "final_sentence": "hidden from the user"}
{"comment_sentence_id": 5211, "class": "ExternalInitializer", "comment_sentence": "this class is used in cases when the parameter should not be initialized by", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this class is used in cases when the parameter should not be initialized by", "final_sentence": "this class is used in cases when the parameter should not be initialized by"}
{"comment_sentence_id": 1581, "class": "BooleanArray", "comment_sentence": "func pandas^array specifying dtype boolean see examples", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "func pandas array specifying dtype boolean see examples", "final_sentence": "func pandas array specifying dtype boolean see examples"}
{"comment_sentence_id": 3537, "class": "ParseResults", "comment_sentence": "minutes in result false", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "minutes in result false", "final_sentence": "minutes in result false"}
{"comment_sentence_id": 4112, "class": "TokenStreamIterator", "comment_sentence": "until the eof token is reached.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "until the eof token is reached", "final_sentence": "until the eof token is reached"}
{"comment_sentence_id": 2070, "class": "PlotAccessor", "comment_sentence": "include bool bool, default is false", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "include bool bool default is false", "final_sentence": "include bool bool default is false"}
{"comment_sentence_id": 4157, "class": "_OpNamespace", "comment_sentence": "2", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "2", "final_sentence": "2"}
{"comment_sentence_id": 19, "class": "Atomic", "comment_sentence": "decorated function in the instance itself, used as a context manager.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "decorated function in the instance itself used as a context manager", "final_sentence": "decorated function in the instance itself used as a context manager"}
{"comment_sentence_id": 4312, "class": "AdaptiveMaxPool3d", "comment_sentence": "# target output size of 7x7x7 cube", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "target output size of 7x7x7 cube", "final_sentence": "target output size of 7x7x7 cube"}
{"comment_sentence_id": 4344, "class": "BaseTestCase", "comment_sentence": "base class used for all tensorboard tests", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "base class used for all tensorboard tests", "final_sentence": "base class used for all tensorboard tests"}
{"comment_sentence_id": 543, "class": "MigrationLoader", "comment_sentence": "on initialization, this class will scan those directories, and open and", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "on initialization this class will scan those directories and open and", "final_sentence": "on initialization this class will scan those directories and open and"}
{"comment_sentence_id": 5352, "class": "MultiLabelMarginLoss", "comment_sentence": "batch element instead and ignores attr size average .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "batch element instead and ignores attr size average", "final_sentence": "batch element instead and ignores attr size average"}
{"comment_sentence_id": 574, "class": "MigrationQuestioner", "comment_sentence": "give the autodetector responses to questions it might have.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "give the autodetector responses to questions it might have", "final_sentence": "give the autodetector responses to questions it might have"}
{"comment_sentence_id": 3333, "class": "omdict", "comment_sentence": "interact with all items in the dictionary, including multiple items with", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "interact with all items in the dictionary including multiple items with", "final_sentence": "interact with all items in the dictionary including multiple items with"}
{"comment_sentence_id": 1599, "class": "BooleanArray", "comment_sentence": "none", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "none", "final_sentence": "none"}
{"comment_sentence_id": 1, "class": "AccessMixin", "comment_sentence": "abstract cbv mixin that gives access mixins the same customizable", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "abstract cbv mixin that gives access mixins the same customizable", "final_sentence": "abstract cbv mixin that gives access mixins the same customizable"}
{"comment_sentence_id": 4119, "class": "TreeBuilder", "comment_sentence": "commentclass the class to use for comments", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "commentclass the class to use for comments", "final_sentence": "commentclass the class to use for comments"}
{"comment_sentence_id": 1080, "class": "InteractiveShellApp", "comment_sentence": "of the subclass", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "of the subclass", "final_sentence": "of the subclass"}
{"comment_sentence_id": 2, "class": "AccessMixin", "comment_sentence": "functionality.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "functionality", "final_sentence": "functionality"}
{"comment_sentence_id": 5220, "class": "FisherSnedecor", "comment_sentence": "example", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "example", "final_sentence": "example"}
{"comment_sentence_id": 5295, "class": "Module", "comment_sentence": "def init self", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "def init self", "final_sentence": "def init self"}
{"comment_sentence_id": 4218, "class": "Adadelta", "comment_sentence": "of squared gradients default 09", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "of squared gradients default 09", "final_sentence": "of squared gradients default 09"}
{"comment_sentence_id": 1647, "class": "CategoricalDtype", "comment_sentence": "categories sequence, optional", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "categories sequence optional", "final_sentence": "categories sequence optional"}
{"comment_sentence_id": 610, "class": "MultiValueDict", "comment_sentence": "d^setlist lastname , holovaty , willison", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "d setlist lastname holovaty willison", "final_sentence": "d setlist lastname holovaty willison"}
{"comment_sentence_id": 84, "class": "BadSignature", "comment_sentence": "signature does not match.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "signature does not match", "final_sentence": "signature does not match"}
{"comment_sentence_id": 5226, "class": "FisherSnedecor", "comment_sentence": "df2 float or tensor degrees of freedom parameter 2", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "df2 float or tensor degrees of freedom parameter 2", "final_sentence": "df2 float or tensor degrees of freedom parameter 2"}
{"comment_sentence_id": 4243, "class": "Adam", "comment_sentence": "betas tuple float, float , optional coefficients used for computing", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "betas tuple float float optional coefficients used for computing", "final_sentence": "betas tuple float float optional coefficients used for computing"}
{"comment_sentence_id": 1283, "class": "ConfigDict", "comment_sentence": "should be used with an empty list or dictionary as a default value.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "should be used with an empty list or dictionary as a default value", "final_sentence": "should be used with an empty list or dictionary as a default value"}
{"comment_sentence_id": 3337, "class": "omdict", "comment_sentence": "getlist , add , addlist , set , setlist , setdefaultlist ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "getlist add addlist set setlist setdefaultlist", "final_sentence": "getlist add addlist set setlist setdefaultlist"}
{"comment_sentence_id": 5222, "class": "FisherSnedecor", "comment_sentence": "m^sample # fisher snedecor distributed with df1 1 and df2 2", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "m sample fisher snedecor distributed with df1 1 and df2 2", "final_sentence": "m sample fisher snedecor distributed with df1 1 and df2 2"}
{"comment_sentence_id": 3228, "class": "MethodDispatcher", "comment_sentence": "multiple keys so accessing any one of the items in the original", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "multiple keys so accessing any one of the items in the original", "final_sentence": "multiple keys so accessing any one of the items in the original"}
{"comment_sentence_id": 3478, "class": "PacifyFlushWrapper", "comment_sentence": "pipe, all calls and attributes are proxied.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pipe all calls and attributes are proxied", "final_sentence": "pipe all calls and attributes are proxied"}
{"comment_sentence_id": 2451, "class": "CaseInsensitiveDict", "comment_sentence": "testing is case insensitive", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "testing is case insensitive", "final_sentence": "testing is case insensitive"}
{"comment_sentence_id": 1095, "class": "IPythonInputSplitter", "comment_sentence": "an input splitter that recognizes all of ipython s special syntax.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "an input splitter that recognizes all of ipython s special syntax", "final_sentence": "an input splitter that recognizes all of ipython s special syntax"}
{"comment_sentence_id": 5199, "class": "Error", "comment_sentence": "each error in the report has an error message and a backtrace.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "each error in the report has an error message and a backtrace", "final_sentence": "each error in the report has an error message and a backtrace"}
{"comment_sentence_id": 4244, "class": "Adam", "comment_sentence": "running averages of gradient and its square default 09, 0999", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "running averages of gradient and its square default 09 0999", "final_sentence": "running averages of gradient and its square default 09 0999"}
{"comment_sentence_id": 1293, "class": "ConfigDict", "comment_sentence": "liquids fluids we like , false,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "liquids fluids we like false", "final_sentence": "liquids fluids we like false"}
{"comment_sentence_id": 2961, "class": "HebrewProber", "comment_sentence": "alone are meaningless.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "alone are meaningless", "final_sentence": "alone are meaningless"}
{"comment_sentence_id": 4126, "class": "Trie", "comment_sentence": "abstract base class for tries", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "abstract base class for tries", "final_sentence": "abstract base class for tries"}
{"comment_sentence_id": 4309, "class": "AdaptiveMaxPool3d", "comment_sentence": "m nn^adaptivemaxpool3d 5,7,9", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "m nn adaptivemaxpool3d 5 7 9", "final_sentence": "m nn adaptivemaxpool3d 5 7 9"}
{"comment_sentence_id": 2458, "class": "CaseInsensitiveDict", "comment_sentence": "of how the header name was originally stored.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "of how the header name was originally stored", "final_sentence": "of how the header name was originally stored"}
{"comment_sentence_id": 71, "class": "AutoFieldMeta", "comment_sentence": "deprecate inheritance from autofield and use of isinstance with autofield", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "deprecate inheritance from autofield and use of isinstance with autofield", "final_sentence": "deprecate inheritance from autofield and use of isinstance with autofield"}
{"comment_sentence_id": 1333, "class": "ConfigDict", "comment_sentence": "valueerror invalid value for config potatoes moo", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "valueerror invalid value for config potatoes moo", "final_sentence": "valueerror invalid value for config potatoes moo"}
{"comment_sentence_id": 4275, "class": "Adamax", "comment_sentence": "arguments", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "arguments", "final_sentence": "arguments"}
{"comment_sentence_id": 4471, "class": "BCEWithLogitsLoss", "comment_sentence": "if attr reduction is not none", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "if attr reduction is not none", "final_sentence": "if attr reduction is not none"}
{"comment_sentence_id": 4390, "class": "BatchNorm1d", "comment_sentence": "statistics in both training and eval modes.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "statistics in both training and eval modes", "final_sentence": "statistics in both training and eval modes"}
{"comment_sentence_id": 2956, "class": "HebrewProber", "comment_sentence": "the hebrewprober is not using any language model.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "the hebrewprober is not using any language model", "final_sentence": "the hebrewprober is not using any language model"}
{"comment_sentence_id": 4277, "class": "Adamax", "comment_sentence": "parameter groups", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "parameter groups", "final_sentence": "parameter groups"}
{"comment_sentence_id": 4276, "class": "Adamax", "comment_sentence": "params iterable iterable of parameters to optimize or dicts defining", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "params iterable iterable of parameters to optimize or dicts defining", "final_sentence": "params iterable iterable of parameters to optimize or dicts defining"}
{"comment_sentence_id": 3186, "class": "MemcachedBytecodeCache", "comment_sentence": "method get key", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "method get key", "final_sentence": "method get key"}
{"comment_sentence_id": 4362, "class": "BatchNorm1d", "comment_sentence": "keep running estimates, and batch statistics are instead used during", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "keep running estimates and batch statistics are instead used during", "final_sentence": "keep running estimates and batch statistics are instead used during"}
{"comment_sentence_id": 3260, "class": "NotAny", "comment_sentence": "notany always returns", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "notany always returns", "final_sentence": "notany always returns"}
{"comment_sentence_id": 1311, "class": "ConfigDict", "comment_sentence": "pot^walk liquids vodka , parent true", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot walk liquids vodka parent true", "final_sentence": "pot walk liquids vodka parent true"}
{"comment_sentence_id": 3408, "class": "Option", "comment_sentence": "input.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "input", "final_sentence": "input"}
{"comment_sentence_id": 139, "class": "BaseCommand", "comment_sentence": "rather than all applications models, call", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "rather than all applications models call", "final_sentence": "rather than all applications models call"}
{"comment_sentence_id": 5427, "class": "NetModifier", "comment_sentence": "inherited classes should implement the modify net method where", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "inherited classes should implement the modify net method where", "final_sentence": "inherited classes should implement the modify net method where"}
{"comment_sentence_id": 1424, "class": "ConfigureMailboxes", "comment_sentence": "add one or more mailboxes.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "add one or more mailboxes", "final_sentence": "add one or more mailboxes"}
{"comment_sentence_id": 1303, "class": "ConfigDict", "comment_sentence": "pot potatoes", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot potatoes", "final_sentence": "pot potatoes"}
{"comment_sentence_id": 5347, "class": "MultiLabelMarginLoss", "comment_sentence": "reduce bool, optional deprecated see attr reduction .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "reduce bool optional deprecated see attr reduction", "final_sentence": "reduce bool optional deprecated see attr reduction"}
{"comment_sentence_id": 53, "class": "AtomicTests", "comment_sentence": "since the decorator syntax is converted into a context manager see the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "since the decorator syntax is converted into a context manager see the", "final_sentence": "since the decorator syntax is converted into a context manager see the"}
{"comment_sentence_id": 3538, "class": "ParseResults", "comment_sentence": "result^dump 1999 , , 12 , , 31", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "result dump 1999 12 31", "final_sentence": "result dump 1999 12 31"}
{"comment_sentence_id": 4117, "class": "TreeBuilder", "comment_sentence": "documentclass the class to use for the bottommost node of a document", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "documentclass the class to use for the bottommost node of a document", "final_sentence": "documentclass the class to use for the bottommost node of a document"}
{"comment_sentence_id": 1668, "class": "CategoricalDtype", "comment_sentence": "pd^series a , b , a , c , dtype t", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pd series a b a c dtype t", "final_sentence": "pd series a b a c dtype t"}
{"comment_sentence_id": 3242, "class": "Module_six_moves_urllib_request", "comment_sentence": "lazy loading of moved objects in six^moves.urllib request", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "lazy loading of moved objects in six moves urllib request", "final_sentence": "lazy loading of moved objects in six moves urllib request"}
{"comment_sentence_id": 3184, "class": "MemcachedBytecodeCache", "comment_sentence": "provided it s an integer with the number of seconds the cache", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "provided it s an integer with the number of seconds the cache", "final_sentence": "provided it s an integer with the number of seconds the cache"}
{"comment_sentence_id": 1055, "class": "DummyMod", "comment_sentence": "a namespace must be assigned to the module s dict .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a namespace must be assigned to the module s dict", "final_sentence": "a namespace must be assigned to the module s dict"}
{"comment_sentence_id": 1070, "class": "HistoryAccessor", "comment_sentence": "ipython shells use", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "ipython shells use", "final_sentence": "ipython shells use"}
{"comment_sentence_id": 3414, "class": "Option", "comment_sentence": "this is set to a boolean automatically if", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this is set to a boolean automatically if", "final_sentence": "this is set to a boolean automatically if"}
{"comment_sentence_id": 5934, "class": "PreparedRequest", "comment_sentence": "containing the exact bytes that will be sent to the server.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "containing the exact bytes that will be sent to the server", "final_sentence": "containing the exact bytes that will be sent to the server"}
{"comment_sentence_id": 112, "class": "BaseCommand", "comment_sentence": "4", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "4", "final_sentence": "4"}
{"comment_sentence_id": 2450, "class": "CaseInsensitiveDict", "comment_sentence": "however, querying and contains", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "however querying and contains", "final_sentence": "however querying and contains"}
{"comment_sentence_id": 5446, "class": "OneHotCategorical", "comment_sentence": "m onehotcategorical torch^tensor 025, 025, 025, 025", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "m onehotcategorical torch tensor 025 025 025 025", "final_sentence": "m onehotcategorical torch tensor 025 025 025 025"}
{"comment_sentence_id": 3413, "class": "Option", "comment_sentence": "enabled.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "enabled", "final_sentence": "enabled"}
{"comment_sentence_id": 4155, "class": "_OpNamespace", "comment_sentence": "object called my namespace and set it as an attribute on the ops", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "object called my namespace and set it as an attribute on the ops", "final_sentence": "object called my namespace and set it as an attribute on the ops"}
{"comment_sentence_id": 2453, "class": "CaseInsensitiveDict", "comment_sentence": "cid accept application json", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "cid accept application json", "final_sentence": "cid accept application json"}
{"comment_sentence_id": 2081, "class": "PlotAccessor", "comment_sentence": "options to pass to matplotlib plotting method.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "options to pass to matplotlib plotting method", "final_sentence": "options to pass to matplotlib plotting method"}
{"comment_sentence_id": 5450, "class": "OneHotCategorical", "comment_sentence": "probs tensor event probabilities", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "probs tensor event probabilities", "final_sentence": "probs tensor event probabilities"}
{"comment_sentence_id": 5466, "class": "Poisson", "comment_sentence": "math", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "math", "final_sentence": "math"}
{"comment_sentence_id": 555, "class": "MigrationLoader", "comment_sentence": "to disk, but this is probably fine.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "to disk but this is probably fine", "final_sentence": "to disk but this is probably fine"}
{"comment_sentence_id": 100, "class": "BaseCommand", "comment_sentence": "2", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "2", "final_sentence": "2"}
{"comment_sentence_id": 3270, "class": "NotAny", "comment_sentence": "boolean expr boolean term zeroormore and or boolean term", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "boolean expr boolean term zeroormore and or boolean term", "final_sentence": "boolean expr boolean term zeroormore and or boolean term"}
{"comment_sentence_id": 4392, "class": "BatchNorm1d", "comment_sentence": "shape", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "shape", "final_sentence": "shape"}
{"comment_sentence_id": 2358, "class": "_BZ2Proxy", "comment_sentence": "support for r bz2 and w bz2 modes.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "support for r bz2 and w bz2 modes", "final_sentence": "support for r bz2 and w bz2 modes"}
{"comment_sentence_id": 1144, "class": "Struct", "comment_sentence": "attribute style access.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "attribute style access", "final_sentence": "attribute style access"}
{"comment_sentence_id": 1714, "class": "CategoricalIndex", "comment_sentence": "categories will be replaced with nan.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "categories will be replaced with nan", "final_sentence": "categories will be replaced with nan"}
{"comment_sentence_id": 3499, "class": "ParseFatalException", "comment_sentence": "user throwable exception thrown when inconsistent parse content", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "user throwable exception thrown when inconsistent parse content", "final_sentence": "user throwable exception thrown when inconsistent parse content"}
{"comment_sentence_id": 2236, "class": "SQLTable", "comment_sentence": "do better type conversions.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "do better type conversions", "final_sentence": "do better type conversions"}
{"comment_sentence_id": 5473, "class": "Poisson", "comment_sentence": "rate number, tensor the rate parameter", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "rate number tensor the rate parameter", "final_sentence": "rate number tensor the rate parameter"}
{"comment_sentence_id": 3298, "class": "NotMyLock", "comment_sentence": "pass", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pass", "final_sentence": "pass"}
{"comment_sentence_id": 3315, "class": "omdict", "comment_sentence": "standard dict methods interact with the first value associated with a given", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "standard dict methods interact with the first value associated with a given", "final_sentence": "standard dict methods interact with the first value associated with a given"}
{"comment_sentence_id": 4401, "class": "BatchNorm1d", "comment_sentence": "output m input", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "output m input", "final_sentence": "output m input"}
{"comment_sentence_id": 3395, "class": "Option", "comment_sentence": "param show envvar controls if an environment variable should be shown on", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param show envvar controls if an environment variable should be shown on", "final_sentence": "param show envvar controls if an environment variable should be shown on"}
{"comment_sentence_id": 4239, "class": "Adam", "comment_sentence": "arguments", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "arguments", "final_sentence": "arguments"}
{"comment_sentence_id": 1340, "class": "ConfigDict", "comment_sentence": "isinstance pot liquids , configdict", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "isinstance pot liquids configdict", "final_sentence": "isinstance pot liquids configdict"}
{"comment_sentence_id": 2056, "class": "PlotAccessor", "comment_sentence": "center .", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "center", "final_sentence": "center"}
{"comment_sentence_id": 1716, "class": "CategoricalIndex", "comment_sentence": "the categories for the categorical.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the categories for the categorical", "final_sentence": "the categories for the categorical"}
{"comment_sentence_id": 2410, "class": "Argument", "comment_sentence": "provide fewer features than options but can have infinite nargs", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "provide fewer features than options but can have infinite nargs", "final_sentence": "provide fewer features than options but can have infinite nargs"}
{"comment_sentence_id": 1330, "class": "ConfigDict", "comment_sentence": "invalidkeyerror invalid key for config liquids evil", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "invalidkeyerror invalid key for config liquids evil", "final_sentence": "invalidkeyerror invalid key for config liquids evil"}
{"comment_sentence_id": 106, "class": "BaseCommand", "comment_sentence": "3", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "3", "final_sentence": "3"}
{"comment_sentence_id": 1082, "class": "InteractiveShellApp", "comment_sentence": "meth init shell to be implemented by the subclass", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "meth init shell to be implemented by the subclass", "final_sentence": "meth init shell to be implemented by the subclass"}
{"comment_sentence_id": 1708, "class": "CategoricalIndex", "comment_sentence": "additions, divisions, .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "additions divisions", "final_sentence": "additions divisions"}
{"comment_sentence_id": 3339, "class": "omdict", "comment_sentence": "allitems , allkeys , allvalues , lists , listitems ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "allitems allkeys allvalues lists listitems", "final_sentence": "allitems allkeys allvalues lists listitems"}
{"comment_sentence_id": 102, "class": "BaseCommand", "comment_sentence": "an argumentparser for the arguments, parses them, performs", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "an argumentparser for the arguments parses them performs", "final_sentence": "an argumentparser for the arguments parses them performs"}
{"comment_sentence_id": 55, "class": "AtomicTests", "comment_sentence": "syntax and the bulk of the tests use the context manager syntax.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "syntax and the bulk of the tests use the context manager syntax", "final_sentence": "syntax and the bulk of the tests use the context manager syntax"}
{"comment_sentence_id": 1426, "class": "ConfigureMailboxes", "comment_sentence": "in the metadata index.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "in the metadata index", "final_sentence": "in the metadata index"}
{"comment_sentence_id": 1336, "class": "ConfigDict", "comment_sentence": "configvalueerror invalid value for config colors 4 green", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "configvalueerror invalid value for config colors 4 green", "final_sentence": "configvalueerror invalid value for config colors 4 green"}
{"comment_sentence_id": 5258, "class": "LBFGS", "comment_sentence": "lr float learning rate default 1", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "lr float learning rate default 1", "final_sentence": "lr float learning rate default 1"}
{"comment_sentence_id": 1553, "class": "AccessorCallableDocumenter", "comment_sentence": "call from the method signature for", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "call from the method signature for", "final_sentence": "call from the method signature for"}
{"comment_sentence_id": 4135, "class": "UnlockError", "comment_sentence": "except error", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "except error", "final_sentence": "except error"}
{"comment_sentence_id": 4394, "class": "BatchNorm1d", "comment_sentence": "output math n, c or math n, c, l same shape as input", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "output math n c or math n c l same shape as input", "final_sentence": "output math n c or math n c l same shape as input"}
{"comment_sentence_id": 5370, "class": "MultiLabelMarginLoss", "comment_sentence": "loss nn^multilabelmarginloss", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "loss nn multilabelmarginloss", "final_sentence": "loss nn multilabelmarginloss"}
{"comment_sentence_id": 3510, "class": "ParseResults", "comment_sentence": "by list index results 0 , results 1 , etc", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "by list index results 0 results 1 etc", "final_sentence": "by list index results 0 results 1 etc"}
{"comment_sentence_id": 5356, "class": "MultiLabelMarginLoss", "comment_sentence": "none no reduction will be applied,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "none no reduction will be applied", "final_sentence": "none no reduction will be applied"}
{"comment_sentence_id": 3250, "class": "Node", "comment_sentence": "represents an item in the tree", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "represents an item in the tree", "final_sentence": "represents an item in the tree"}
{"comment_sentence_id": 605, "class": "MultiValueDict", "comment_sentence": "d^getlist doesnotexist", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "d getlist doesnotexist", "final_sentence": "d getlist doesnotexist"}
{"comment_sentence_id": 1048, "class": "DisplayHook", "comment_sentence": "the custom ipython displayhook to replace sys^displayhook.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the custom ipython displayhook to replace sys displayhook", "final_sentence": "the custom ipython displayhook to replace sys displayhook"}
{"comment_sentence_id": 1595, "class": "BooleanArray", "comment_sentence": "whether to copy the values and mask arrays.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "whether to copy the values and mask arrays", "final_sentence": "whether to copy the values and mask arrays"}
{"comment_sentence_id": 1078, "class": "InteractiveShellApp", "comment_sentence": "as part of configuring a shell environment.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "as part of configuring a shell environment", "final_sentence": "as part of configuring a shell environment"}
{"comment_sentence_id": 5324, "class": "MultiLabelMarginLoss", "comment_sentence": "and output math y which is a 2d tensor of target class indices .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "and output math y which is a 2d tensor of target class indices", "final_sentence": "and output math y which is a 2d tensor of target class indices"}
{"comment_sentence_id": 1653, "class": "CategoricalDtype", "comment_sentence": "false if there is no existing ordered to maintain.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "false if there is no existing ordered to maintain", "final_sentence": "false if there is no existing ordered to maintain"}
{"comment_sentence_id": 1640, "class": "BusinessMixin", "comment_sentence": "mixin to business types to provide related functions.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "mixin to business types to provide related functions", "final_sentence": "mixin to business types to provide related functions"}
{"comment_sentence_id": 2234, "class": "SQLTable", "comment_sentence": "for mapping pandas tables to sql tables.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "for mapping pandas tables to sql tables", "final_sentence": "for mapping pandas tables to sql tables"}
{"comment_sentence_id": 2412, "class": "Argument", "comment_sentence": "all parameters are passed onwards to the parameter constructor.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "all parameters are passed onwards to the parameter constructor", "final_sentence": "all parameters are passed onwards to the parameter constructor"}
{"comment_sentence_id": 3398, "class": "Option", "comment_sentence": "are not shown.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "are not shown", "final_sentence": "are not shown"}
{"comment_sentence_id": 3321, "class": "omdict", "comment_sentence": "get , setdefault , pop , popitem ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "get setdefault pop popitem", "final_sentence": "get setdefault pop popitem"}
{"comment_sentence_id": 5196, "class": "EnforceUnique", "comment_sentence": "raises an error if a key is seen more than once.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "raises an error if a key is seen more than once", "final_sentence": "raises an error if a key is seen more than once"}
{"comment_sentence_id": 4378, "class": "BatchNorm1d", "comment_sentence": "default 1e 5", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "default 1e 5", "final_sentence": "default 1e 5"}
{"comment_sentence_id": 3604, "class": "Path", "comment_sentence": "handle it returns just the filename.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "handle it returns just the filename", "final_sentence": "handle it returns just the filename"}
{"comment_sentence_id": 3180, "class": "MemcachedBytecodeCache", "comment_sentence": "value is a string and", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "value is a string and", "final_sentence": "value is a string and"}
{"comment_sentence_id": 636, "class": "MultiValueField", "comment_sentence": "each value in", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "each value in", "final_sentence": "each value in"}
{"comment_sentence_id": 3313, "class": "omdict", "comment_sentence": "map, is also maintained and stores an ordered list of", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "map is also maintained and stores an ordered list of", "final_sentence": "map is also maintained and stores an ordered list of"}
{"comment_sentence_id": 3415, "class": "Option", "comment_sentence": "the option string contains a slash to mark two options.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the option string contains a slash to mark two options", "final_sentence": "the option string contains a slash to mark two options"}
{"comment_sentence_id": 1307, "class": "ConfigDict", "comment_sentence": "pot carrots", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot carrots", "final_sentence": "pot carrots"}
{"comment_sentence_id": 3100, "class": "Markup", "comment_sentence": "markup em hello em foo", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "markup em hello em foo", "final_sentence": "markup em hello em foo"}
{"comment_sentence_id": 3416, "class": "Option", "comment_sentence": "param multiple if this is set to true then the argument is accepted", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param multiple if this is set to true then the argument is accepted", "final_sentence": "param multiple if this is set to true then the argument is accepted"}
{"comment_sentence_id": 1309, "class": "ConfigDict", "comment_sentence": "pot^walk liquids^vodka", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot walk liquids vodka", "final_sentence": "pot walk liquids vodka"}
{"comment_sentence_id": 4142, "class": "ZipResourceFinder", "comment_sentence": "resource finder for resources in ^zip files.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "resource finder for resources in zip files", "final_sentence": "resource finder for resources in zip files"}
{"comment_sentence_id": 3493, "class": "ParseError", "comment_sentence": "in the toml being parsed.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "in the toml being parsed", "final_sentence": "in the toml being parsed"}
{"comment_sentence_id": 2444, "class": "CaseInsensitiveDict", "comment_sentence": "provides lower items .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "provides lower items", "final_sentence": "provides lower items"}
{"comment_sentence_id": 2442, "class": "CaseInsensitiveDict", "comment_sentence": "mutablemapping as well as dict s copy .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "mutablemapping as well as dict s copy", "final_sentence": "mutablemapping as well as dict s copy"}
{"comment_sentence_id": 132, "class": "BaseCommand", "comment_sentence": "a boolean if true , the command prints a warning if the set of", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a boolean if true the command prints a warning if the set of", "final_sentence": "a boolean if true the command prints a warning if the set of"}
{"comment_sentence_id": 5444, "class": "OneHotCategorical", "comment_sentence": "attr probs and attr logits .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "attr probs and attr logits", "final_sentence": "attr probs and attr logits"}
{"comment_sentence_id": 3392, "class": "Option", "comment_sentence": "value is a string, it shows the string instead of the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "value is a string it shows the string instead of the", "final_sentence": "value is a string it shows the string instead of the"}
{"comment_sentence_id": 3490, "class": "PackageIndex", "comment_sentence": "represents a package index and provides easier access to endpoints", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "represents a package index and provides easier access to endpoints", "final_sentence": "represents a package index and provides easier access to endpoints"}
{"comment_sentence_id": 1050, "class": "DisplayHook", "comment_sentence": "that gets called anytime user code returns a value.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "that gets called anytime user code returns a value", "final_sentence": "that gets called anytime user code returns a value"}
{"comment_sentence_id": 1320, "class": "ConfigDict", "comment_sentence": "pot tags 0 c", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot tags 0 c", "final_sentence": "pot tags 0 c"}
{"comment_sentence_id": 4315, "class": "AdaptiveMaxPool3d", "comment_sentence": "output m input", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "output m input", "final_sentence": "output m input"}
{"comment_sentence_id": 3096, "class": "Markup", "comment_sentence": "it has the same methods as that type, but", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "it has the same methods as that type but", "final_sentence": "it has the same methods as that type but"}
{"comment_sentence_id": 3403, "class": "Option", "comment_sentence": "param confirmation prompt if set then the value will need to be confirmed", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param confirmation prompt if set then the value will need to be confirmed", "final_sentence": "param confirmation prompt if set then the value will need to be confirmed"}
{"comment_sentence_id": 609, "class": "MultiValueDict", "comment_sentence": "nonexistent", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "nonexistent", "final_sentence": "nonexistent"}
{"comment_sentence_id": 4240, "class": "Adam", "comment_sentence": "params iterable iterable of parameters to optimize or dicts defining", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "params iterable iterable of parameters to optimize or dicts defining", "final_sentence": "params iterable iterable of parameters to optimize or dicts defining"}
{"comment_sentence_id": 1881, "class": "IntegerArray", "comment_sentence": "mask a boolean array holding a mask on the data, true is missing", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "mask a boolean array holding a mask on the data true is missing", "final_sentence": "mask a boolean array holding a mask on the data true is missing"}
{"comment_sentence_id": 3327, "class": "omdict", "comment_sentence": "an optional", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "an optional", "final_sentence": "an optional"}
{"comment_sentence_id": 1554, "class": "AccessorCallableDocumenter", "comment_sentence": "callable accessors like series^plot", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "callable accessors like series plot", "final_sentence": "callable accessors like series plot"}
{"comment_sentence_id": 1109, "class": "Magics", "comment_sentence": ".", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": NaN, "final_sentence": "nan"}
{"comment_sentence_id": 2062, "class": "PlotAccessor", "comment_sentence": "yerr dataframe, series, array like, dict and str", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "yerr dataframe series array like dict and str", "final_sentence": "yerr dataframe series array like dict and str"}
{"comment_sentence_id": 108, "class": "BaseCommand", "comment_sentence": "calling the handle method with the parsed arguments any", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "calling the handle method with the parsed arguments any", "final_sentence": "calling the handle method with the parsed arguments any"}
{"comment_sentence_id": 3331, "class": "omdict", "comment_sentence": "methods with list in their", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "methods with list in their", "final_sentence": "methods with list in their"}
{"comment_sentence_id": 5448, "class": "OneHotCategorical", "comment_sentence": "tensor 0., 0., 0., 1.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "tensor 0 0 0 1", "final_sentence": "tensor 0 0 0 1"}
{"comment_sentence_id": 2448, "class": "CaseInsensitiveDict", "comment_sentence": "keys , items , iterkeys , and iteritems", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "keys items iterkeys and iteritems", "final_sentence": "keys items iterkeys and iteritems"}
{"comment_sentence_id": 5439, "class": "OneHotCategorical", "comment_sentence": "attr logits .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "attr logits", "final_sentence": "attr logits"}
{"comment_sentence_id": 2423, "class": "Bucket", "comment_sentence": "it s created", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "it s created", "final_sentence": "it s created"}
{"comment_sentence_id": 4145, "class": "_OpNamespace", "comment_sentence": "say a user has created a custom operator called my namespace my op .", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "say a user has created a custom operator called my namespace my op", "final_sentence": "say a user has created a custom operator called my namespace my op"}
{"comment_sentence_id": 3178, "class": "MemcachedBytecodeCache", "comment_sentence": "method set key, value , timeout", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "method set key value timeout", "final_sentence": "method set key value timeout"}
{"comment_sentence_id": 114, "class": "BaseCommand", "comment_sentence": "commanderror , run from argv will instead print an error", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "commanderror run from argv will instead print an error", "final_sentence": "commanderror run from argv will instead print an error"}
{"comment_sentence_id": 1986, "class": "PlotAccessor", "comment_sentence": "option plotting^backend .", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "option plotting backend", "final_sentence": "option plotting backend"}
{"comment_sentence_id": 1112, "class": "Magics", "comment_sentence": "use the method decorators @line magic and @cell magic to decorate", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "use the method decorators @line magic and @cell magic to decorate", "final_sentence": "use the method decorators @line magic and @cell magic to decorate"}
{"comment_sentence_id": 122, "class": "BaseCommand", "comment_sentence": "help", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "help", "final_sentence": "help"}
{"comment_sentence_id": 4216, "class": "Adadelta", "comment_sentence": "parameter groups", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "parameter groups", "final_sentence": "parameter groups"}
{"comment_sentence_id": 4245, "class": "Adam", "comment_sentence": "eps float, optional term added to the denominator to improve", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "eps float optional term added to the denominator to improve", "final_sentence": "eps float optional term added to the denominator to improve"}
{"comment_sentence_id": 2425, "class": "Bucket", "comment_sentence": "the buckets get an internal checksum from the cache assigned and use this", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the buckets get an internal checksum from the cache assigned and use this", "final_sentence": "the buckets get an internal checksum from the cache assigned and use this"}
{"comment_sentence_id": 3188, "class": "MemcachedBytecodeCache", "comment_sentence": "if the item does not", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "if the item does not", "final_sentence": "if the item does not"}
{"comment_sentence_id": 1439, "class": "EncryptedIntDict", "comment_sentence": "this also adds a working keys function.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this also adds a working keys function", "final_sentence": "this also adds a working keys function"}
{"comment_sentence_id": 3305, "class": "omdict", "comment_sentence": "a multivalue dictionary is a dictionary that can store multiple values per", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a multivalue dictionary is a dictionary that can store multiple values per", "final_sentence": "a multivalue dictionary is a dictionary that can store multiple values per"}
{"comment_sentence_id": 3190, "class": "MemcachedBytecodeCache", "comment_sentence": "the other arguments to the constructor are the prefix for all keys that", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the other arguments to the constructor are the prefix for all keys that", "final_sentence": "the other arguments to the constructor are the prefix for all keys that"}
{"comment_sentence_id": 5243, "class": "LBFGS", "comment_sentence": "implements l bfgs algorithm, heavily inspired by minfunc", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "implements l bfgs algorithm heavily inspired by minfunc", "final_sentence": "implements l bfgs algorithm heavily inspired by minfunc"}
{"comment_sentence_id": 130, "class": "BaseCommand", "comment_sentence": "false .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "false", "final_sentence": "false"}
{"comment_sentence_id": 553, "class": "MigrationLoader", "comment_sentence": "new migration.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "new migration", "final_sentence": "new migration"}
{"comment_sentence_id": 3508, "class": "ParseResults", "comment_sentence": "the parsed data", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the parsed data", "final_sentence": "the parsed data"}
{"comment_sentence_id": 4376, "class": "BatchNorm1d", "comment_sentence": "math n, c, l or math l from input of size math n, l", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "math n c l or math l from input of size math n l", "final_sentence": "math n c l or math l from input of size math n l"}
{"comment_sentence_id": 1649, "class": "CategoricalDtype", "comment_sentence": "ordered bool or none, default false", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "ordered bool or none default false", "final_sentence": "ordered bool or none default false"}
{"comment_sentence_id": 3541, "class": "ParseResults", "comment_sentence": "year 1999", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "year 1999", "final_sentence": "year 1999"}
{"comment_sentence_id": 5224, "class": "FisherSnedecor", "comment_sentence": "args", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "args", "final_sentence": "args"}
{"comment_sentence_id": 3254, "class": "NotAny", "comment_sentence": "lookahead to disallow matching with the given parse expression.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "lookahead to disallow matching with the given parse expression", "final_sentence": "lookahead to disallow matching with the given parse expression"}
{"comment_sentence_id": 16, "class": "Atomic", "comment_sentence": "guarantee the atomic execution of a given block.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "guarantee the atomic execution of a given block", "final_sentence": "guarantee the atomic execution of a given block"}
{"comment_sentence_id": 557, "class": "MigrationLoader", "comment_sentence": "in memory.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "in memory", "final_sentence": "in memory"}
{"comment_sentence_id": 4279, "class": "Adamax", "comment_sentence": "betas tuple float, float , optional coefficients used for computing", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "betas tuple float float optional coefficients used for computing", "final_sentence": "betas tuple float float optional coefficients used for computing"}
{"comment_sentence_id": 2069, "class": "PlotAccessor", "comment_sentence": "labels with right in the legend.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "labels with right in the legend", "final_sentence": "labels with right in the legend"}
{"comment_sentence_id": 5342, "class": "MultiLabelMarginLoss", "comment_sentence": "if the field attr size average", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "if the field attr size average", "final_sentence": "if the field attr size average"}
{"comment_sentence_id": 2377, "class": "_PathParents", "comment_sentence": "this object provides sequence like access to the logical ancestors", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this object provides sequence like access to the logical ancestors", "final_sentence": "this object provides sequence like access to the logical ancestors"}
{"comment_sentence_id": 3386, "class": "Option", "comment_sentence": "have some extra features that arguments don t have.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "have some extra features that arguments don t have", "final_sentence": "have some extra features that arguments don t have"}
{"comment_sentence_id": 1644, "class": "CategoricalDtype", "comment_sentence": "type for categorical data with the categories and orderedness.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "type for categorical data with the categories and orderedness", "final_sentence": "type for categorical data with the categories and orderedness"}
{"comment_sentence_id": 4364, "class": "BatchNorm1d", "comment_sentence": "note", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "note", "final_sentence": "note"}
{"comment_sentence_id": 4465, "class": "BCEWithLogitsLoss", "comment_sentence": "the unreduced ie with attr reduction set to none loss can be described as", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the unreduced ie with attr reduction set to none loss can be described as", "final_sentence": "the unreduced ie with attr reduction set to none loss can be described as"}
{"comment_sentence_id": 3399, "class": "Option", "comment_sentence": "param prompt if set to true or a non empty string then the user will be", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param prompt if set to true or a non empty string then the user will be", "final_sentence": "param prompt if set to true or a non empty string then the user will be"}
{"comment_sentence_id": 1114, "class": "Magics", "comment_sentence": "use the class decorator @magics class to ensure that the magic", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "use the class decorator @magics class to ensure that the magic", "final_sentence": "use the class decorator @magics class to ensure that the magic"}
{"comment_sentence_id": 3472, "class": "PacifyFlushWrapper", "comment_sentence": "from ^flush being called on broken pipe during the shutdown final gc", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "from flush being called on broken pipe during the shutdown final gc", "final_sentence": "from flush being called on broken pipe during the shutdown final gc"}
{"comment_sentence_id": 2082, "class": "PlotAccessor", "comment_sentence": "returns", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "returns", "final_sentence": "returns"}
{"comment_sentence_id": 3079, "class": "Markup", "comment_sentence": "markup hello, em world em !", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "markup hello em world em", "final_sentence": "markup hello em world em"}
{"comment_sentence_id": 1165, "class": "TermColors", "comment_sentence": "confused by color escapes.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "confused by color escapes", "final_sentence": "confused by color escapes"}
{"comment_sentence_id": 5343, "class": "MultiLabelMarginLoss", "comment_sentence": "is set to false , the losses are instead summed for each minibatch.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "is set to false the losses are instead summed for each minibatch", "final_sentence": "is set to false the losses are instead summed for each minibatch"}
{"comment_sentence_id": 1297, "class": "ConfigDict", "comment_sentence": "tags tags , c c , int, 0 ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "tags tags c c int 0", "final_sentence": "tags tags c c int 0"}
{"comment_sentence_id": 3264, "class": "NotAny", "comment_sentence": "and, or, not map caselesskeyword, and or not ^split", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "and or not map caselesskeyword and or not split", "final_sentence": "and or not map caselesskeyword and or not split"}
{"comment_sentence_id": 2547, "class": "DataViewSequence", "comment_sentence": "each entry is an instance of item class .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "each entry is an instance of item class", "final_sentence": "each entry is an instance of item class"}
{"comment_sentence_id": 5325, "class": "MultiLabelMarginLoss", "comment_sentence": "for each sample in the mini batch", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "for each sample in the mini batch", "final_sentence": "for each sample in the mini batch"}
{"comment_sentence_id": 4382, "class": "BatchNorm1d", "comment_sentence": "ie simple average .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "ie simple average", "final_sentence": "ie simple average"}
{"comment_sentence_id": 121, "class": "BaseCommand", "comment_sentence": "several attributes affect behavior at various steps along the way", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "several attributes affect behavior at various steps along the way", "final_sentence": "several attributes affect behavior at various steps along the way"}
{"comment_sentence_id": 2378, "class": "_PathParents", "comment_sentence": "of a path.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "of a path", "final_sentence": "of a path"}
{"comment_sentence_id": 4214, "class": "Adadelta", "comment_sentence": "arguments", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "arguments", "final_sentence": "arguments"}
{"comment_sentence_id": 2460, "class": "CaseInsensitiveDict", "comment_sentence": "operations are given keys that have equal ^lower s, the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "operations are given keys that have equal lower s the", "final_sentence": "operations are given keys that have equal lower s the"}
{"comment_sentence_id": 4149, "class": "_OpNamespace", "comment_sentence": "at startup, this operation will not yet be bound into python.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "at startup this operation will not yet be bound into python", "final_sentence": "at startup this operation will not yet be bound into python"}
{"comment_sentence_id": 4316, "class": "AdaptiveMaxPool3d", "comment_sentence": "# target output size of 7x9x8", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "target output size of 7x9x8", "final_sentence": "target output size of 7x9x8"}
{"comment_sentence_id": 5371, "class": "MultiLabelMarginLoss", "comment_sentence": "x torch^floattensor 01, 02, 04, 08", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "x torch floattensor 01 02 04 08", "final_sentence": "x torch floattensor 01 02 04 08"}
{"comment_sentence_id": 1317, "class": "ConfigDict", "comment_sentence": "red , blue , red , red", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "red blue red red", "final_sentence": "red blue red red"}
{"comment_sentence_id": 3341, "class": "omdict", "comment_sentence": "iterlistitems", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "iterlistitems", "final_sentence": "iterlistitems"}
{"comment_sentence_id": 4467, "class": "BCEWithLogitsLoss", "comment_sentence": "ell x, y l l 1, dots,l n ^ top, quad", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "ell x y l l 1 dots l n top quad", "final_sentence": "ell x y l l 1 dots l n top quad"}
{"comment_sentence_id": 5326, "class": "MultiLabelMarginLoss", "comment_sentence": "math", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "math", "final_sentence": "math"}
{"comment_sentence_id": 1301, "class": "ConfigDict", "comment_sentence": "colors , liquids , tags , , ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "colors liquids tags", "final_sentence": "colors liquids tags"}
{"comment_sentence_id": 4468, "class": "BCEWithLogitsLoss", "comment_sentence": "l n w n left y n cdot log sigma x n", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "l n w n left y n cdot log sigma x n", "final_sentence": "l n w n left y n cdot log sigma x n"}
{"comment_sentence_id": 2073, "class": "PlotAccessor", "comment_sentence": "backend to use instead of the backend specified in the option", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "backend to use instead of the backend specified in the option", "final_sentence": "backend to use instead of the backend specified in the option"}
{"comment_sentence_id": 2053, "class": "PlotAccessor", "comment_sentence": "specify relative alignments for bar plot layout.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "specify relative alignments for bar plot layout", "final_sentence": "specify relative alignments for bar plot layout"}
{"comment_sentence_id": 11, "class": "Archive", "comment_sentence": "the external api class that encapsulates an archive implementation.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "the external api class that encapsulates an archive implementation", "final_sentence": "the external api class that encapsulates an archive implementation"}
{"comment_sentence_id": 4384, "class": "BatchNorm1d", "comment_sentence": "affine a boolean value that when set to true , this module has", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "affine a boolean value that when set to true this module has", "final_sentence": "affine a boolean value that when set to true this module has"}
{"comment_sentence_id": 5, "class": "AmbiguityError", "comment_sentence": "more than one migration matches a name prefix.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "more than one migration matches a name prefix", "final_sentence": "more than one migration matches a name prefix"}
{"comment_sentence_id": 1116, "class": "Magics", "comment_sentence": "initialization.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "initialization", "final_sentence": "initialization"}
{"comment_sentence_id": 4313, "class": "AdaptiveMaxPool3d", "comment_sentence": "m nn^adaptivemaxpool3d 7", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "m nn adaptivemaxpool3d 7", "final_sentence": "m nn adaptivemaxpool3d 7"}
{"comment_sentence_id": 1305, "class": "ConfigDict", "comment_sentence": "pot liquids vodka", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot liquids vodka", "final_sentence": "pot liquids vodka"}
{"comment_sentence_id": 4307, "class": "AdaptiveMaxPool3d", "comment_sentence": "examples", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 3412, "class": "Option", "comment_sentence": "param flag value which value should be used for this flag if it s", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param flag value which value should be used for this flag if it s", "final_sentence": "param flag value which value should be used for this flag if it s"}
{"comment_sentence_id": 1579, "class": "BooleanArray", "comment_sentence": "see ref boolean^kleene for more.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "see ref boolean kleene for more", "final_sentence": "see ref boolean kleene for more"}
{"comment_sentence_id": 1110, "class": "Magics", "comment_sentence": "classes providing magic functions need to subclass this class, and they", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "classes providing magic functions need to subclass this class and they", "final_sentence": "classes providing magic functions need to subclass this class and they"}
{"comment_sentence_id": 4370, "class": "BatchNorm1d", "comment_sentence": "where math hat x is the estimated statistic and math x t is the", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "where math hat x is the estimated statistic and math x t is the", "final_sentence": "where math hat x is the estimated statistic and math x t is the"}
{"comment_sentence_id": 3091, "class": "Markup", "comment_sentence": "return a href foo foo a", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "return a href foo foo a", "final_sentence": "return a href foo foo a"}
{"comment_sentence_id": 1712, "class": "CategoricalIndex", "comment_sentence": "the values of the categorical.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the values of the categorical", "final_sentence": "the values of the categorical"}
{"comment_sentence_id": 3192, "class": "MemcachedBytecodeCache", "comment_sentence": "the cache system.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the cache system", "final_sentence": "the cache system"}
{"comment_sentence_id": 3077, "class": "Markup", "comment_sentence": "to escape the text, use the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "to escape the text use the", "final_sentence": "to escape the text use the"}
{"comment_sentence_id": 3307, "class": "omdict", "comment_sentence": "an ordered multivalue dictionary is a multivalue dictionary that", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "an ordered multivalue dictionary is a multivalue dictionary that", "final_sentence": "an ordered multivalue dictionary is a multivalue dictionary that"}
{"comment_sentence_id": 1068, "class": "HistoryAccessor", "comment_sentence": "access the history database without adding to it.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "access the history database without adding to it", "final_sentence": "access the history database without adding to it"}
{"comment_sentence_id": 3335, "class": "omdict", "comment_sentence": "the new omdict methods are", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the new omdict methods are", "final_sentence": "the new omdict methods are"}
{"comment_sentence_id": 1313, "class": "ConfigDict", "comment_sentence": "pot colors ^append red", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot colors append red", "final_sentence": "pot colors append red"}
{"comment_sentence_id": 4242, "class": "Adam", "comment_sentence": "lr float, optional learning rate default 1e 3", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "lr float optional learning rate default 1e 3", "final_sentence": "lr float optional learning rate default 1e 3"}
{"comment_sentence_id": 4396, "class": "BatchNorm1d", "comment_sentence": "# with learnable parameters", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "with learnable parameters", "final_sentence": "with learnable parameters"}
{"comment_sentence_id": 3323, "class": "omdict", "comment_sentence": "getitem , setitem , delitem , contains ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "getitem setitem delitem contains", "final_sentence": "getitem setitem delitem contains"}
{"comment_sentence_id": 1670, "class": "CategoricalDtype", "comment_sentence": "1 b", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "1 b", "final_sentence": "1 b"}
{"comment_sentence_id": 3098, "class": "Markup", "comment_sentence": "markup em %s em % foo & bar", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "markup em s em foo bar", "final_sentence": "markup em s em foo bar"}
{"comment_sentence_id": 2211, "class": "SelectNSeries", "comment_sentence": "parameters", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "parameters", "final_sentence": "parameters"}
{"comment_sentence_id": 4398, "class": "BatchNorm1d", "comment_sentence": "# without learnable parameters", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "without learnable parameters", "final_sentence": "without learnable parameters"}
{"comment_sentence_id": 28, "class": "Atomic", "comment_sentence": "none denotes the absence of a savepoint.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "none denotes the absence of a savepoint", "final_sentence": "none denotes the absence of a savepoint"}
{"comment_sentence_id": 1060, "class": "GeoJSON", "comment_sentence": "scalar types none, number, string are not allowed, only dict containers.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "scalar types none number string are not allowed only dict containers", "final_sentence": "scalar types none number string are not allowed only dict containers"}
{"comment_sentence_id": 5345, "class": "MultiLabelMarginLoss", "comment_sentence": "when reduce is false .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "when reduce is false", "final_sentence": "when reduce is false"}
{"comment_sentence_id": 1299, "class": "ConfigDict", "comment_sentence": "colors colors , red , blue ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "colors colors red blue", "final_sentence": "colors colors red blue"}
{"comment_sentence_id": 576, "class": "MigrationQuestioner", "comment_sentence": "interactive subclass is what the command line arguments will use.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "interactive subclass is what the command line arguments will use", "final_sentence": "interactive subclass is what the command line arguments will use"}
{"comment_sentence_id": 3410, "class": "Option", "comment_sentence": "the default is", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the default is", "final_sentence": "the default is"}
{"comment_sentence_id": 589, "class": "ModelSignal", "comment_sentence": "of the app label^modelname form.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "of the app label modelname form", "final_sentence": "of the app label modelname form"}
{"comment_sentence_id": 4221, "class": "Adadelta", "comment_sentence": "lr float, optional coefficient that scale delta before it is applied", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "lr float optional coefficient that scale delta before it is applied", "final_sentence": "lr float optional coefficient that scale delta before it is applied"}
{"comment_sentence_id": 2440, "class": "CaseInsensitiveDict", "comment_sentence": "a case insensitive dict like object.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a case insensitive dict like object", "final_sentence": "a case insensitive dict like object"}
{"comment_sentence_id": 789, "class": "SpatialRefSysMixin", "comment_sentence": "the spatialrefsysmixin is a class used by the database dependent", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "the spatialrefsysmixin is a class used by the database dependent", "final_sentence": "the spatialrefsysmixin is a class used by the database dependent"}
{"comment_sentence_id": 2085, "class": "PlotAccessor", "comment_sentence": "will be the object returned by the backend.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "will be the object returned by the backend", "final_sentence": "will be the object returned by the backend"}
{"comment_sentence_id": 5289, "class": "Module", "comment_sentence": "modules can also contain other modules, allowing to nest them in", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "modules can also contain other modules allowing to nest them in", "final_sentence": "modules can also contain other modules allowing to nest them in"}
{"comment_sentence_id": 4305, "class": "AdaptiveMaxPool3d", "comment_sentence": "useful to pass to nn^maxunpool3d.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "useful to pass to nn maxunpool3d", "final_sentence": "useful to pass to nn maxunpool3d"}
{"comment_sentence_id": 5376, "class": "MultiLabelMarginLoss", "comment_sentence": "tensor 08500", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "tensor 08500", "final_sentence": "tensor 08500"}
{"comment_sentence_id": 141, "class": "BaseCommand", "comment_sentence": "is the list of application s configuration provided by the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "is the list of application s configuration provided by the", "final_sentence": "is the list of application s configuration provided by the"}
{"comment_sentence_id": 3311, "class": "omdict", "comment_sentence": "a", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a", "final_sentence": "a"}
{"comment_sentence_id": 1044, "class": "CapturingDisplayPublisher", "comment_sentence": "a displaypublisher that store", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a displaypublisher that store", "final_sentence": "a displaypublisher that store"}
{"comment_sentence_id": 3232, "class": "MethodDispatcher", "comment_sentence": "a default value which can be set through the default attribute.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a default value which can be set through the default attribute", "final_sentence": "a default value which can be set through the default attribute"}
{"comment_sentence_id": 3089, "class": "Markup", "comment_sentence": "class foo", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "class foo", "final_sentence": "class foo"}
{"comment_sentence_id": 3309, "class": "omdict", "comment_sentence": "internally, items are stored in a doubly linked list, self.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "internally items are stored in a doubly linked list self", "final_sentence": "internally items are stored in a doubly linked list self"}
{"comment_sentence_id": 1158, "class": "TBTools", "comment_sentence": "basic tools used by all traceback printer classes.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "basic tools used by all traceback printer classes", "final_sentence": "basic tools used by all traceback printer classes"}
{"comment_sentence_id": 5291, "class": "Module", "comment_sentence": "you can assign the submodules as regular attributes", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "you can assign the submodules as regular attributes", "final_sentence": "you can assign the submodules as regular attributes"}
{"comment_sentence_id": 3534, "class": "ParseResults", "comment_sentence": "result month 12", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "result month 12", "final_sentence": "result month 12"}
{"comment_sentence_id": 3319, "class": "omdict", "comment_sentence": "behave identically.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "behave identically", "final_sentence": "behave identically"}
{"comment_sentence_id": 4310, "class": "AdaptiveMaxPool3d", "comment_sentence": "input torch^randn 1, 64, 8, 9, 10", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "input torch randn 1 64 8 9 10", "final_sentence": "input torch randn 1 64 8 9 10"}
{"comment_sentence_id": 4368, "class": "BatchNorm1d", "comment_sentence": "update rule for running statistics here is", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "update rule for running statistics here is", "final_sentence": "update rule for running statistics here is"}
{"comment_sentence_id": 3272, "class": "NotAny", "comment_sentence": "are actually floats", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "are actually floats", "final_sentence": "are actually floats"}
{"comment_sentence_id": 5360, "class": "MultiLabelMarginLoss", "comment_sentence": "and attr reduce are in the process of being deprecated, and in the meantime,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "and attr reduce are in the process of being deprecated and in the meantime", "final_sentence": "and attr reduce are in the process of being deprecated and in the meantime"}
{"comment_sentence_id": 1657, "class": "CategoricalDtype", "comment_sentence": "methods", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "methods", "final_sentence": "methods"}
{"comment_sentence_id": 3539, "class": "ParseResults", "comment_sentence": "day 31", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "day 31", "final_sentence": "day 31"}
{"comment_sentence_id": 4483, "class": "BCEWithLogitsLoss", "comment_sentence": "in the case of multi label classification the loss can be described as", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "in the case of multi label classification the loss can be described as", "final_sentence": "in the case of multi label classification the loss can be described as"}
{"comment_sentence_id": 4129, "class": "UndefinedEnvironmentName", "comment_sentence": "environment.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "environment", "final_sentence": "environment"}
{"comment_sentence_id": 5364, "class": "MultiLabelMarginLoss", "comment_sentence": "input math c or math n, c where n is the batch size and c", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "input math c or math n c where n is the batch size and c", "final_sentence": "input math c or math n c where n is the batch size and c"}
{"comment_sentence_id": 663, "class": "MyModel", "comment_sentence": "model subclass with a custom base using metaclass.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "model subclass with a custom base using metaclass", "final_sentence": "model subclass with a custom base using metaclass"}
{"comment_sentence_id": 1146, "class": "Struct", "comment_sentence": "style access.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "style access", "final_sentence": "style access"}
{"comment_sentence_id": 4241, "class": "Adam", "comment_sentence": "parameter groups", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "parameter groups", "final_sentence": "parameter groups"}
{"comment_sentence_id": 3296, "class": "NotMyLock", "comment_sentence": "raise notmylock", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "raise notmylock", "final_sentence": "raise notmylock"}
{"comment_sentence_id": 1289, "class": "ConfigDict", "comment_sentence": "pot configdict rules potatoes how many potatoes?", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot configdict rules potatoes how many potatoes", "final_sentence": "pot configdict rules potatoes how many potatoes"}
{"comment_sentence_id": 5441, "class": "OneHotCategorical", "comment_sentence": "note attr probs must be non negative, finite and have a non zero sum,", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "note attr probs must be non negative finite and have a non zero sum", "final_sentence": "note attr probs must be non negative finite and have a non zero sum"}
{"comment_sentence_id": 1577, "class": "BooleanArray", "comment_sentence": "booleanarray implements kleene logic sometimes called three value", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "booleanarray implements kleene logic sometimes called three value", "final_sentence": "booleanarray implements kleene logic sometimes called three value"}
{"comment_sentence_id": 1721, "class": "CategoricalIndex", "comment_sentence": "whether or not this categorical is treated as an ordered", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "whether or not this categorical is treated as an ordered", "final_sentence": "whether or not this categorical is treated as an ordered"}
{"comment_sentence_id": 2084, "class": "PlotAccessor", "comment_sentence": "if the backend is not the default matplotlib one, the return value", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "if the backend is not the default matplotlib one the return value", "final_sentence": "if the backend is not the default matplotlib one the return value"}
{"comment_sentence_id": 2504, "class": "Context_", "comment_sentence": "modifications on attr parent must not", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "modifications on attr parent must not", "final_sentence": "modifications on attr parent must not"}
{"comment_sentence_id": 3266, "class": "NotAny", "comment_sentence": "ident and or not word alphas", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "ident and or not word alphas", "final_sentence": "ident and or not word alphas"}
{"comment_sentence_id": 897, "class": "XFrameOptionsMiddleware", "comment_sentence": "to prevent the", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "to prevent the", "final_sentence": "to prevent the"}
{"comment_sentence_id": 638, "class": "MultiValueField", "comment_sentence": "cleaned by the first field, the second value is cleaned by the second", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "cleaned by the first field the second value is cleaned by the second", "final_sentence": "cleaned by the first field the second value is cleaned by the second"}
{"comment_sentence_id": 1084, "class": "InteractiveShellApp", "comment_sentence": "meth init extensions", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "meth init extensions", "final_sentence": "meth init extensions"}
{"comment_sentence_id": 4278, "class": "Adamax", "comment_sentence": "lr float, optional learning rate default 2e 3", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "lr float optional learning rate default 2e 3", "final_sentence": "lr float optional learning rate default 2e 3"}
{"comment_sentence_id": 5327, "class": "MultiLabelMarginLoss", "comment_sentence": "text loss x, y sum ij frac max 0, 1 x y j x i text x^size 0", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "text loss x y sum ij frac max 0 1 x y j x i text x size 0", "final_sentence": "text loss x y sum ij frac max 0 1 x y j x i text x size 0"}
{"comment_sentence_id": 520, "class": "MigrationGraph", "comment_sentence": "a node should be a tuple app path, migration name .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a node should be a tuple app path migration name", "final_sentence": "a node should be a tuple app path migration name"}
{"comment_sentence_id": 3606, "class": "Path", "comment_sentence": "basic checks about what the file or directory should be.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "basic checks about what the file or directory should be", "final_sentence": "basic checks about what the file or directory should be"}
{"comment_sentence_id": 4474, "class": "BCEWithLogitsLoss", "comment_sentence": "ell x, y begin cases", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "ell x y begin cases", "final_sentence": "ell x y begin cases"}
{"comment_sentence_id": 4133, "class": "UnlockError", "comment_sentence": "try", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "try", "final_sentence": "try"}
{"comment_sentence_id": 3226, "class": "MethodDispatcher", "comment_sentence": "dict with 2 special properties", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "dict with 2 special properties", "final_sentence": "dict with 2 special properties"}
{"comment_sentence_id": 4369, "class": "BatchNorm1d", "comment_sentence": "math hat x text new 1 text momentum times hat x text momentum times x t ,", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "math hat x text new 1 text momentum times hat x text momentum times x t", "final_sentence": "math hat x text new 1 text momentum times hat x text momentum times x t"}
{"comment_sentence_id": 4314, "class": "AdaptiveMaxPool3d", "comment_sentence": "input torch^randn 1, 64, 10, 9, 8", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "input torch randn 1 64 10 9 8", "final_sentence": "input torch randn 1 64 10 9 8"}
{"comment_sentence_id": 3262, "class": "NotAny", "comment_sentence": "may be constructed using the operator.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "may be constructed using the operator", "final_sentence": "may be constructed using the operator"}
{"comment_sentence_id": 1589, "class": "BooleanArray", "comment_sentence": "values numpy^ndarray", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "values numpy ndarray", "final_sentence": "values numpy ndarray"}
{"comment_sentence_id": 4360, "class": "BatchNorm1d", "comment_sentence": "of 01.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "of 01", "final_sentence": "of 01"}
{"comment_sentence_id": 1322, "class": "ConfigDict", "comment_sentence": "pot tags ^append z invalid", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot tags append z invalid", "final_sentence": "pot tags append z invalid"}
{"comment_sentence_id": 602, "class": "MultiValueDict", "comment_sentence": "simon", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "simon", "final_sentence": "simon"}
{"comment_sentence_id": 4153, "class": "_OpNamespace", "comment_sentence": "torch^ops.my namespace will invoke the getattr magic method", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "torch ops my namespace will invoke the getattr magic method", "final_sentence": "torch ops my namespace will invoke the getattr magic method"}
{"comment_sentence_id": 66, "class": "AutoFieldMeta", "comment_sentence": "in many areas django also relies on using isinstance to check for an", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "in many areas django also relies on using isinstance to check for an", "final_sentence": "in many areas django also relies on using isinstance to check for an"}
{"comment_sentence_id": 4476, "class": "BCEWithLogitsLoss", "comment_sentence": "operatorname sum l , & text if reduction text sum .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "operatorname sum l text if reduction text sum", "final_sentence": "operatorname sum l text if reduction text sum"}
{"comment_sentence_id": 2213, "class": "SelectNSeries", "comment_sentence": "n int", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "n int", "final_sentence": "n int"}
{"comment_sentence_id": 134, "class": "BaseCommand", "comment_sentence": "requires system checks", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "requires system checks", "final_sentence": "requires system checks"}
{"comment_sentence_id": 3164, "class": "MemcachedBytecodeCache", "comment_sentence": "tummy s memcache or cmemcache but will accept any class that provides", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "tummy s memcache or cmemcache but will accept any class that provides", "final_sentence": "tummy s memcache or cmemcache but will accept any class that provides"}
{"comment_sentence_id": 4281, "class": "Adamax", "comment_sentence": "eps float, optional term added to the denominator to improve", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "eps float optional term added to the denominator to improve", "final_sentence": "eps float optional term added to the denominator to improve"}
{"comment_sentence_id": 110, "class": "BaseCommand", "comment_sentence": "output and, if the command is intended to produce a block of", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "output and if the command is intended to produce a block of", "final_sentence": "output and if the command is intended to produce a block of"}
{"comment_sentence_id": 3532, "class": "ParseResults", "comment_sentence": "list result 1999 , , 12 , , 31", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "list result 1999 12 31", "final_sentence": "list result 1999 12 31"}
{"comment_sentence_id": 4110, "class": "TokenStreamIterator", "comment_sentence": "the iterator for tokenstreams.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the iterator for tokenstreams", "final_sentence": "the iterator for tokenstreams"}
{"comment_sentence_id": 3083, "class": "Markup", "comment_sentence": "markup^escape hello, em world em !", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "markup escape hello em world em", "final_sentence": "markup escape hello em world em"}
{"comment_sentence_id": 5261, "class": "LBFGS", "comment_sentence": "max eval int maximal number of function evaluations per optimization", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "max eval int maximal number of function evaluations per optimization", "final_sentence": "max eval int maximal number of function evaluations per optimization"}
{"comment_sentence_id": 123, "class": "BaseCommand", "comment_sentence": "a short description of the command, which will be printed in", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a short description of the command which will be printed in", "final_sentence": "a short description of the command which will be printed in"}
{"comment_sentence_id": 3294, "class": "NotMyLock", "comment_sentence": "raised when an attempt is made to unlock a file someone else locked.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "raised when an attempt is made to unlock a file someone else locked", "final_sentence": "raised when an attempt is made to unlock a file someone else locked"}
{"comment_sentence_id": 1665, "class": "CategoricalDtype", "comment_sentence": "for more.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "for more", "final_sentence": "for more"}
{"comment_sentence_id": 3246, "class": "Mul", "comment_sentence": "multiplies the left with the right node.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "multiplies the left with the right node", "final_sentence": "multiplies the left with the right node"}
{"comment_sentence_id": 1291, "class": "ConfigDict", "comment_sentence": "carrots how many carrots?", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "carrots how many carrots", "final_sentence": "carrots how many carrots"}
{"comment_sentence_id": 5350, "class": "MultiLabelMarginLoss", "comment_sentence": "on attr size average .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "on attr size average", "final_sentence": "on attr size average"}
{"comment_sentence_id": 1281, "class": "ConfigDict", "comment_sentence": "to be dictionaries or lists of items that match the rules defined.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "to be dictionaries or lists of items that match the rules defined", "final_sentence": "to be dictionaries or lists of items that match the rules defined"}
{"comment_sentence_id": 2324, "class": "StringMethods", "comment_sentence": "handled otherwise by a particular method.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "handled otherwise by a particular method", "final_sentence": "handled otherwise by a particular method"}
{"comment_sentence_id": 5958, "class": "Response", "comment_sentence": "server s response to an http request.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "server s response to an http request", "final_sentence": "server s response to an http request"}
{"comment_sentence_id": 387, "class": "Individual", "comment_sentence": "it won t be registered with the admin, so the", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "it won t be registered with the admin so the", "final_sentence": "it won t be registered with the admin so the"}
{"comment_sentence_id": 4470, "class": "BCEWithLogitsLoss", "comment_sentence": "where math n is the batch size.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "where math n is the batch size", "final_sentence": "where math n is the batch size"}
{"comment_sentence_id": 1436, "class": "ContactSet", "comment_sentence": "set contact lines, ensuring contact exists", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "set contact lines ensuring contact exists", "final_sentence": "set contact lines ensuring contact exists"}
{"comment_sentence_id": 2447, "class": "CaseInsensitiveDict", "comment_sentence": "case of the last key to be set, and iter instance ,", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "case of the last key to be set and iter instance", "final_sentence": "case of the last key to be set and iter instance"}
{"comment_sentence_id": 271, "class": "Client", "comment_sentence": "the like it is here to allow testing against the", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "the like it is here to allow testing against the", "final_sentence": "the like it is here to allow testing against the"}
{"comment_sentence_id": 4151, "class": "_OpNamespace", "comment_sentence": "following sequence of magic tricks will occur", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "following sequence of magic tricks will occur", "final_sentence": "following sequence of magic tricks will occur"}
{"comment_sentence_id": 1666, "class": "CategoricalDtype", "comment_sentence": "examples", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 4461, "class": "BCEWithLogitsLoss", "comment_sentence": "class.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "class", "final_sentence": "class"}
{"comment_sentence_id": 1428, "class": "ConfigureMailboxes", "comment_sentence": "and configured for automatic indexing.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "and configured for automatic indexing", "final_sentence": "and configured for automatic indexing"}
{"comment_sentence_id": 3420, "class": "Option", "comment_sentence": "arguments.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "arguments", "final_sentence": "arguments"}
{"comment_sentence_id": 519, "class": "MigrationGraph", "comment_sentence": "replaced migrations to point to the replacing one.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "replaced migrations to point to the replacing one", "final_sentence": "replaced migrations to point to the replacing one"}
{"comment_sentence_id": 4358, "class": "BatchNorm1d", "comment_sentence": "evaluation.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "evaluation", "final_sentence": "evaluation"}
{"comment_sentence_id": 3390, "class": "Option", "comment_sentence": "normally, defaults are not shown.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "normally defaults are not shown", "final_sentence": "normally defaults are not shown"}
{"comment_sentence_id": 1704, "class": "CategoricalIndex", "comment_sentence": "categoricalindex, like categorical, can only take on a limited,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "categoricalindex like categorical can only take on a limited", "final_sentence": "categoricalindex like categorical can only take on a limited"}
{"comment_sentence_id": 3531, "class": "ParseResults", "comment_sentence": "prints", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "prints", "final_sentence": "prints"}
{"comment_sentence_id": 4371, "class": "BatchNorm1d", "comment_sentence": "new observed value.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "new observed value", "final_sentence": "new observed value"}
{"comment_sentence_id": 4351, "class": "BatchNorm1d", "comment_sentence": "the mean and standard deviation are calculated per dimension over", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the mean and standard deviation are calculated per dimension over", "final_sentence": "the mean and standard deviation are calculated per dimension over"}
{"comment_sentence_id": 5341, "class": "MultiLabelMarginLoss", "comment_sentence": "some losses, there are multiple elements per sample.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "some losses there are multiple elements per sample", "final_sentence": "some losses there are multiple elements per sample"}
{"comment_sentence_id": 1672, "class": "CategoricalDtype", "comment_sentence": "3 nan", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "3 nan", "final_sentence": "3 nan"}
{"comment_sentence_id": 4164, "class": "_OpNamespace", "comment_sentence": "then calls this new operation", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "then calls this new operation", "final_sentence": "then calls this new operation"}
{"comment_sentence_id": 25, "class": "Atomic", "comment_sentence": "ensure that some code runs within a transaction without creating overhead.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "ensure that some code runs within a transaction without creating overhead", "final_sentence": "ensure that some code runs within a transaction without creating overhead"}
{"comment_sentence_id": 5323, "class": "MultiLabelMarginLoss", "comment_sentence": "hinge loss margin based loss between input math x a 2d mini batch tensor", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "hinge loss margin based loss between input math x a 2d mini batch tensor", "final_sentence": "hinge loss margin based loss between input math x a 2d mini batch tensor"}
{"comment_sentence_id": 5505, "class": "ResNetBuilder", "comment_sentence": "helper class for constructing residual blocks.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "helper class for constructing residual blocks", "final_sentence": "helper class for constructing residual blocks"}
{"comment_sentence_id": 2080, "class": "PlotAccessor", "comment_sentence": "kwargs", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "kwargs", "final_sentence": "kwargs"}
{"comment_sentence_id": 3424, "class": "Option", "comment_sentence": "variable in case a prefix is defined on the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "variable in case a prefix is defined on the", "final_sentence": "variable in case a prefix is defined on the"}
{"comment_sentence_id": 5322, "class": "MultiLabelMarginLoss", "comment_sentence": "creates a criterion that optimizes a multi class multi classification", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "creates a criterion that optimizes a multi class multi classification", "final_sentence": "creates a criterion that optimizes a multi class multi classification"}
{"comment_sentence_id": 5431, "class": "NetModifier", "comment_sentence": "modifier net", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "modifier net", "final_sentence": "modifier net"}
{"comment_sentence_id": 1324, "class": "ConfigDict", "comment_sentence": "valueerror invalid value for config tags 1 .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "valueerror invalid value for config tags 1", "final_sentence": "valueerror invalid value for config tags 1"}
{"comment_sentence_id": 5471, "class": "Poisson", "comment_sentence": "tensor 3.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "tensor 3", "final_sentence": "tensor 3"}
{"comment_sentence_id": 1710, "class": "CategoricalIndex", "comment_sentence": "parameters", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "parameters", "final_sentence": "parameters"}
{"comment_sentence_id": 1601, "class": "BooleanArray", "comment_sentence": "booleanarray", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "booleanarray", "final_sentence": "booleanarray"}
{"comment_sentence_id": 3533, "class": "ParseResults", "comment_sentence": "result 0 1999", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "result 0 1999", "final_sentence": "result 0 1999"}
{"comment_sentence_id": 640, "class": "MultiValueField", "comment_sentence": "compressed into a single value.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "compressed into a single value", "final_sentence": "compressed into a single value"}
{"comment_sentence_id": 5442, "class": "OneHotCategorical", "comment_sentence": "and it will be normalized to sum to 1.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "and it will be normalized to sum to 1", "final_sentence": "and it will be normalized to sum to 1"}
{"comment_sentence_id": 4873, "class": "ConvReLU3d", "comment_sentence": "attributes same as torch^nn.quantized^conv3d", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "attributes same as torch nn quantized conv3d", "final_sentence": "attributes same as torch nn quantized conv3d"}
{"comment_sentence_id": 2067, "class": "PlotAccessor", "comment_sentence": "mark right bool, default true", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "mark right bool default true", "final_sentence": "mark right bool default true"}
{"comment_sentence_id": 545, "class": "MigrationLoader", "comment_sentence": "inherit from django^db.migrations^migration.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "inherit from django db migrations migration", "final_sentence": "inherit from django db migrations migration"}
{"comment_sentence_id": 4273, "class": "Adamax", "comment_sentence": "implements adamax algorithm a variant of adam based on infinity norm .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "implements adamax algorithm a variant of adam based on infinity norm", "final_sentence": "implements adamax algorithm a variant of adam based on infinity norm"}
{"comment_sentence_id": 4469, "class": "BCEWithLogitsLoss", "comment_sentence": "1 y n cdot log 1 sigma x n right ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "1 y n cdot log 1 sigma x n right", "final_sentence": "1 y n cdot log 1 sigma x n right"}
{"comment_sentence_id": 3325, "class": "omdict", "comment_sentence": "optional parameters have been added to some dict methods, but because the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "optional parameters have been added to some dict methods but because the", "final_sentence": "optional parameters have been added to some dict methods but because the"}
{"comment_sentence_id": 400, "class": "IntFromGeom", "comment_sentence": "argument is a geometry, return type is an integer.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "argument is a geometry return type is an integer", "final_sentence": "argument is a geometry return type is an integer"}
{"comment_sentence_id": 3418, "class": "Option", "comment_sentence": "this is similar to nargs", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this is similar to nargs", "final_sentence": "this is similar to nargs"}
{"comment_sentence_id": 2542, "class": "CookieConflictError", "comment_sentence": "there are two cookies that meet the criteria specified in the cookie jar.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "there are two cookies that meet the criteria specified in the cookie jar", "final_sentence": "there are two cookies that meet the criteria specified in the cookie jar"}
{"comment_sentence_id": 4274, "class": "Adamax", "comment_sentence": "it has been proposed in adam a method for stochastic optimization .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "it has been proposed in adam a method for stochastic optimization", "final_sentence": "it has been proposed in adam a method for stochastic optimization"}
{"comment_sentence_id": 4250, "class": "Adam", "comment_sentence": "default false", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "default false", "final_sentence": "default false"}
{"comment_sentence_id": 1285, "class": "ConfigDict", "comment_sentence": "rules in place of the default value.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "rules in place of the default value", "final_sentence": "rules in place of the default value"}
{"comment_sentence_id": 1295, "class": "ConfigDict", "comment_sentence": "vodka liters , int, 12", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "vodka liters int 12", "final_sentence": "vodka liters int 12"}
{"comment_sentence_id": 1605, "class": "BooleanArray", "comment_sentence": "booleanarray", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "booleanarray", "final_sentence": "booleanarray"}
{"comment_sentence_id": 5469, "class": "Poisson", "comment_sentence": "m poisson torch^tensor 4", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "m poisson torch tensor 4", "final_sentence": "m poisson torch tensor 4"}
{"comment_sentence_id": 3329, "class": "omdict", "comment_sentence": "items , values , iteritems , itervalues", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "items values iteritems itervalues", "final_sentence": "items values iteritems itervalues"}
{"comment_sentence_id": 5464, "class": "Poisson", "comment_sentence": "creates a poisson distribution parameterized by attr rate , the rate parameter.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "creates a poisson distribution parameterized by attr rate the rate parameter", "final_sentence": "creates a poisson distribution parameterized by attr rate the rate parameter"}
{"comment_sentence_id": 2420, "class": "BrokenStdoutLoggingError", "comment_sentence": "raised if brokenpipeerror occurs for the stdout stream while logging.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "raised if brokenpipeerror occurs for the stdout stream while logging", "final_sentence": "raised if brokenpipeerror occurs for the stdout stream while logging"}
{"comment_sentence_id": 2456, "class": "CaseInsensitiveDict", "comment_sentence": "for example, headers content encoding will return the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "for example headers content encoding will return the", "final_sentence": "for example headers content encoding will return the"}
{"comment_sentence_id": 2445, "class": "CaseInsensitiveDict", "comment_sentence": "all keys are expected to be strings.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "all keys are expected to be strings", "final_sentence": "all keys are expected to be strings"}
{"comment_sentence_id": 2077, "class": "PlotAccessor", "comment_sentence": "specify the plotting^backend for the whole session, set", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "specify the plotting backend for the whole session set", "final_sentence": "specify the plotting backend for the whole session set"}
{"comment_sentence_id": 95, "class": "BaseCommand", "comment_sentence": "the command parsing and execution behavior, the normal flow works", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the command parsing and execution behavior the normal flow works", "final_sentence": "the command parsing and execution behavior the normal flow works"}
{"comment_sentence_id": 3535, "class": "ParseResults", "comment_sentence": "result^day 31", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "result day 31", "final_sentence": "result day 31"}
{"comment_sentence_id": 1575, "class": "BooleanArray", "comment_sentence": "represented by 2 numpy arrays a boolean array with the data and", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "represented by 2 numpy arrays a boolean array with the data and", "final_sentence": "represented by 2 numpy arrays a boolean array with the data and"}
{"comment_sentence_id": 4366, "class": "BatchNorm1d", "comment_sentence": "classes and the conventional notion of momentum.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "classes and the conventional notion of momentum", "final_sentence": "classes and the conventional notion of momentum"}
{"comment_sentence_id": 104, "class": "BaseCommand", "comment_sentence": "pythonpath , and then calls the execute method,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pythonpath and then calls the execute method", "final_sentence": "pythonpath and then calls the execute method"}
{"comment_sentence_id": 1674, "class": "CategoricalDtype", "comment_sentence": "categories 2, object b a", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "categories 2 object b a", "final_sentence": "categories 2 object b a"}
{"comment_sentence_id": 4365, "class": "BatchNorm1d", "comment_sentence": "this attr momentum argument is different from one used in optimizer", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "this attr momentum argument is different from one used in optimizer", "final_sentence": "this attr momentum argument is different from one used in optimizer"}
{"comment_sentence_id": 4311, "class": "AdaptiveMaxPool3d", "comment_sentence": "output m input", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "output m input", "final_sentence": "output m input"}
{"comment_sentence_id": 1552, "class": "AccessorCallableDocumenter", "comment_sentence": "this documenter lets us removes .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this documenter lets us removes", "final_sentence": "this documenter lets us removes"}
{"comment_sentence_id": 4380, "class": "BatchNorm1d", "comment_sentence": "computation.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "computation", "final_sentence": "computation"}
{"comment_sentence_id": 538, "class": "MigrationLoader", "comment_sentence": "load migration files from disk and their status from the database.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "load migration files from disk and their status from the database", "final_sentence": "load migration files from disk and their status from the database"}
{"comment_sentence_id": 4373, "class": "BatchNorm1d", "comment_sentence": "on n, l slices, it s common terminology to call this temporal batch normalization.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "on n l slices it s common terminology to call this temporal batch normalization", "final_sentence": "on n l slices it s common terminology to call this temporal batch normalization"}
{"comment_sentence_id": 5372, "class": "MultiLabelMarginLoss", "comment_sentence": "# for target y, only consider labels 3 and 0, not after label 1", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "for target y only consider labels 3 and 0 not after label 1", "final_sentence": "for target y only consider labels 3 and 0 not after label 1"}
{"comment_sentence_id": 4159, "class": "_OpNamespace", "comment_sentence": "the my namespace object, which will retrieve the operation via", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "the my namespace object which will retrieve the operation via", "final_sentence": "the my namespace object which will retrieve the operation via"}
{"comment_sentence_id": 5121, "class": "EmbeddingBag", "comment_sentence": "offsets torch^longtensor 0,4", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "offsets torch longtensor 0 4", "final_sentence": "offsets torch longtensor 0 4"}
{"comment_sentence_id": 1651, "class": "CategoricalDtype", "comment_sentence": "none can be used to maintain the ordered value of existing categoricals when", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "none can be used to maintain the ordered value of existing categoricals when", "final_sentence": "none can be used to maintain the ordered value of existing categoricals when"}
{"comment_sentence_id": 2049, "class": "PlotAccessor", "comment_sentence": "colorbar bool, optional", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "colorbar bool optional", "final_sentence": "colorbar bool optional"}
{"comment_sentence_id": 2435, "class": "CallBlock", "comment_sentence": "call is called with", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "call is called with", "final_sentence": "call is called with"}
{"comment_sentence_id": 1719, "class": "CategoricalIndex", "comment_sentence": "will be inferred from the data .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "will be inferred from the data", "final_sentence": "will be inferred from the data"}
{"comment_sentence_id": 3505, "class": "ParseResultBytes", "comment_sentence": "compatibility shim for the urlparse^parseresultbytes object.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "compatibility shim for the urlparse parseresultbytes object", "final_sentence": "compatibility shim for the urlparse parseresultbytes object"}
{"comment_sentence_id": 1560, "class": "Base", "comment_sentence": "common tests for all variations of intervalindex construction.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "common tests for all variations of intervalindex construction", "final_sentence": "common tests for all variations of intervalindex construction"}
{"comment_sentence_id": 4223, "class": "Adadelta", "comment_sentence": "weight decay float, optional weight decay l2 penalty default 0", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "weight decay float optional weight decay l2 penalty default 0", "final_sentence": "weight decay float optional weight decay l2 penalty default 0"}
{"comment_sentence_id": 3258, "class": "NotAny", "comment_sentence": "also, notany does", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "also notany does", "final_sentence": "also notany does"}
{"comment_sentence_id": 637, "class": "MultiValueField", "comment_sentence": "this list is cleaned by the corresponding field the first value is", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this list is cleaned by the corresponding field the first value is", "final_sentence": "this list is cleaned by the corresponding field the first value is"}
{"comment_sentence_id": 1591, "class": "BooleanArray", "comment_sentence": "mask numpy^ndarray", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "mask numpy ndarray", "final_sentence": "mask numpy ndarray"}
{"comment_sentence_id": 5429, "class": "NetModifier", "comment_sentence": "example usage", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "example usage", "final_sentence": "example usage"}
{"comment_sentence_id": 518, "class": "MigrationGraph", "comment_sentence": "replacing migration, and repoint any dependencies that pointed to the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "replacing migration and repoint any dependencies that pointed to the", "final_sentence": "replacing migration and repoint any dependencies that pointed to the"}
{"comment_sentence_id": 4463, "class": "BCEWithLogitsLoss", "comment_sentence": "followed by a bceloss as, by combining the operations into one layer,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "followed by a bceloss as by combining the operations into one layer", "final_sentence": "followed by a bceloss as by combining the operations into one layer"}
{"comment_sentence_id": 4466, "class": "BCEWithLogitsLoss", "comment_sentence": "math", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "math", "final_sentence": "math"}
{"comment_sentence_id": 3222, "class": "MemoizedZipManifests", "comment_sentence": "memoized zipfile manifests.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "memoized zipfile manifests", "final_sentence": "memoized zipfile manifests"}
{"comment_sentence_id": 1338, "class": "ConfigDict", "comment_sentence": "how many potatoes?", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "how many potatoes", "final_sentence": "how many potatoes"}
{"comment_sentence_id": 388, "class": "Individual", "comment_sentence": "corresponding raw id widget won t have a magnifying glass link to select", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "corresponding raw id widget won t have a magnifying glass link to select", "final_sentence": "corresponding raw id widget won t have a magnifying glass link to select"}
{"comment_sentence_id": 1548, "class": "AbstractEngine", "comment_sentence": "object serving as a base class for all engines.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "object serving as a base class for all engines", "final_sentence": "object serving as a base class for all engines"}
{"comment_sentence_id": 3317, "class": "omdict", "comment_sentence": "this means that omdict retains method parity with dict, and a dict", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this means that omdict retains method parity with dict and a dict", "final_sentence": "this means that omdict retains method parity with dict and a dict"}
{"comment_sentence_id": 1703, "class": "CategoricalIndex", "comment_sentence": "index based on an underlying class categorical .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "index based on an underlying class categorical", "final_sentence": "index based on an underlying class categorical"}
{"comment_sentence_id": 5369, "class": "MultiLabelMarginLoss", "comment_sentence": "examples", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 5293, "class": "Module", "comment_sentence": "import torch^nn.functional as f", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "import torch nn functional as f", "final_sentence": "import torch nn functional as f"}
{"comment_sentence_id": 301, "class": "CryptPasswordHasher", "comment_sentence": "the crypt module is not supported on all platforms.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "the crypt module is not supported on all platforms", "final_sentence": "the crypt module is not supported on all platforms"}
{"comment_sentence_id": 3394, "class": "Option", "comment_sentence": "this is particularly useful for dynamic options.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this is particularly useful for dynamic options", "final_sentence": "this is particularly useful for dynamic options"}
{"comment_sentence_id": 1059, "class": "GeoJSON", "comment_sentence": "not an already serialized json string.", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "not an already serialized json string", "final_sentence": "not an already serialized json string"}
{"comment_sentence_id": 515, "class": "MigrationGraph", "comment_sentence": "for these instead, the code to load them in here should examine the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "for these instead the code to load them in here should examine the", "final_sentence": "for these instead the code to load them in here should examine the"}
{"comment_sentence_id": 5931, "class": "InvalidHeader", "comment_sentence": "the header value provided was somehow invalid.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the header value provided was somehow invalid", "final_sentence": "the header value provided was somehow invalid"}
{"comment_sentence_id": 3075, "class": "Markup", "comment_sentence": "passing an object to the constructor converts it to text and wraps", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "passing an object to the constructor converts it to text and wraps", "final_sentence": "passing an object to the constructor converts it to text and wraps"}
{"comment_sentence_id": 2058, "class": "PlotAccessor", "comment_sentence": "if true, draw a table using the data in the dataframe and the data", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "if true draw a table using the data in the dataframe and the data", "final_sentence": "if true draw a table using the data in the dataframe and the data"}
{"comment_sentence_id": 3388, "class": "Option", "comment_sentence": "param show default controls if the default value should be shown on the", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param show default controls if the default value should be shown on the", "final_sentence": "param show default controls if the default value should be shown on the"}
{"comment_sentence_id": 2061, "class": "PlotAccessor", "comment_sentence": "table.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "table", "final_sentence": "table"}
{"comment_sentence_id": 656, "class": "MultiWidget", "comment_sentence": "adds a list of subwidgets to the context as widget subwidgets .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "adds a list of subwidgets to the context as widget subwidgets", "final_sentence": "adds a list of subwidgets to the context as widget subwidgets"}
{"comment_sentence_id": 2506, "class": "Context_", "comment_sentence": "template code only.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "template code only", "final_sentence": "template code only"}
{"comment_sentence_id": 1315, "class": "ConfigDict", "comment_sentence": "pot colors ^extend blue , red , red", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "pot colors extend blue red red", "final_sentence": "pot colors extend blue red red"}
{"comment_sentence_id": 586, "class": "ModelBase", "comment_sentence": "metaclass for all models.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "metaclass for all models", "final_sentence": "metaclass for all models"}
{"comment_sentence_id": 68, "class": "AutoFieldMeta", "comment_sentence": "a new flag needs", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a new flag needs", "final_sentence": "a new flag needs"}
{"comment_sentence_id": 136, "class": "BaseCommand", "comment_sentence": "prior to executing the command.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "prior to executing the command", "final_sentence": "prior to executing the command"}
{"comment_sentence_id": 4283, "class": "Adamax", "comment_sentence": "weight decay float, optional weight decay l2 penalty default 0", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "weight decay float optional weight decay l2 penalty default 0", "final_sentence": "weight decay float optional weight decay l2 penalty default 0"}
{"comment_sentence_id": 3393, "class": "Option", "comment_sentence": "value.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "value", "final_sentence": "value"}
{"comment_sentence_id": 1161, "class": "TermColors", "comment_sentence": "this class defines the escape sequences for all the standard ansi?", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this class defines the escape sequences for all the standard ansi", "final_sentence": "this class defines the escape sequences for all the standard ansi"}
{"comment_sentence_id": 2359, "class": "_BZ2Proxy", "comment_sentence": "this is actually", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "this is actually", "final_sentence": "this is actually"}
{"comment_sentence_id": 3536, "class": "ParseResults", "comment_sentence": "month in result true", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "month in result true", "final_sentence": "month in result true"}
{"comment_sentence_id": 4297, "class": "AdaptiveMaxPool3d", "comment_sentence": "the output is of size d x h x w, for any input size.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the output is of size d x h x w for any input size", "final_sentence": "the output is of size d x h x w for any input size"}
{"comment_sentence_id": 64, "class": "AutoFieldMeta", "comment_sentence": "create a non integer automatically generated field using column defaults", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "create a non integer automatically generated field using column defaults", "final_sentence": "create a non integer automatically generated field using column defaults"}
{"comment_sentence_id": 3162, "class": "MemcachedBytecodeCache", "comment_sentence": "storing the information.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "storing the information", "final_sentence": "storing the information"}
{"comment_sentence_id": 1597, "class": "BooleanArray", "comment_sentence": "none", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "none", "final_sentence": "none"}
{"comment_sentence_id": 1327, "class": "ConfigDict", "comment_sentence": "invalidkeyerror invalid key for config evil", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "invalidkeyerror invalid key for config evil", "final_sentence": "invalidkeyerror invalid key for config evil"}
{"comment_sentence_id": 1163, "class": "TermColors", "comment_sentence": "also defines a nocolor escape which is just the null", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "also defines a nocolor escape which is just the null", "final_sentence": "also defines a nocolor escape which is just the null"}
{"comment_sentence_id": 3605, "class": "Path", "comment_sentence": "secondly, it can perform various", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "secondly it can perform various", "final_sentence": "secondly it can perform various"}
{"comment_sentence_id": 3411, "class": "Option", "comment_sentence": "auto detection.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "auto detection", "final_sentence": "auto detection"}
{"comment_sentence_id": 1593, "class": "BooleanArray", "comment_sentence": "indicates missing .", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "indicates missing", "final_sentence": "indicates missing"}
{"comment_sentence_id": 3176, "class": "MemcachedBytecodeCache", "comment_sentence": "the minimal interface for the client passed to the constructor is this", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the minimal interface for the client passed to the constructor is this", "final_sentence": "the minimal interface for the client passed to the constructor is this"}
{"comment_sentence_id": 1142, "class": "Struct", "comment_sentence": "a dict subclass with attribute style access.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "a dict subclass with attribute style access", "final_sentence": "a dict subclass with attribute style access"}
{"comment_sentence_id": 89, "class": "BaseCommand", "comment_sentence": "derive.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "derive", "final_sentence": "derive"}
{"comment_sentence_id": 3081, "class": "Markup", "comment_sentence": "markup 42", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "markup 42", "final_sentence": "markup 42"}
{"comment_sentence_id": 1064, "class": "HelpEnd", "comment_sentence": "transformer for help syntax obj?", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "transformer for help syntax obj", "final_sentence": "transformer for help syntax obj"}
{"comment_sentence_id": 4356, "class": "BatchNorm1d", "comment_sentence": "also by default, during training this layer keeps running estimates of its", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "also by default during training this layer keeps running estimates of its", "final_sentence": "also by default during training this layer keeps running estimates of its"}
{"comment_sentence_id": 4386, "class": "BatchNorm1d", "comment_sentence": "default true", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "default true", "final_sentence": "default true"}
{"comment_sentence_id": 3422, "class": "Option", "comment_sentence": "param allow from autoenv if this is enabled then the value of this", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param allow from autoenv if this is enabled then the value of this", "final_sentence": "param allow from autoenv if this is enabled then the value of this"}
{"comment_sentence_id": 4106, "class": "TarFile", "comment_sentence": "the tarfile class provides an interface to tar archives.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the tarfile class provides an interface to tar archives", "final_sentence": "the tarfile class provides an interface to tar archives"}
{"comment_sentence_id": 5358, "class": "MultiLabelMarginLoss", "comment_sentence": "elements in the output, sum the output will be summed.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "elements in the output sum the output will be summed", "final_sentence": "elements in the output sum the output will be summed"}
{"comment_sentence_id": 4280, "class": "Adamax", "comment_sentence": "running averages of gradient and its square", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "running averages of gradient and its square", "final_sentence": "running averages of gradient and its square"}
{"comment_sentence_id": 4374, "class": "BatchNorm1d", "comment_sentence": "args", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "args", "final_sentence": "args"}
{"comment_sentence_id": 51, "class": "AtomicTests", "comment_sentence": "the tests make assertions on internal attributes because there isn t a", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the tests make assertions on internal attributes because there isn t a", "final_sentence": "the tests make assertions on internal attributes because there isn t a"}
{"comment_sentence_id": 547, "class": "MigrationLoader", "comment_sentence": "django^db.migrations^migration for what that looks like.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "django db migrations migration for what that looks like", "final_sentence": "django db migrations migration for what that looks like"}
{"comment_sentence_id": 88, "class": "BaseCommand", "comment_sentence": "the base class from which all management commands ultimately", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "the base class from which all management commands ultimately", "final_sentence": "the base class from which all management commands ultimately"}
{"comment_sentence_id": 1882, "class": "IntegerArray", "comment_sentence": "to construct an integerarray from generic array like input, use", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "to construct an integerarray from generic array like input use", "final_sentence": "to construct an integerarray from generic array like input use"}
{"comment_sentence_id": 2491, "class": "CommandError", "comment_sentence": "raised when there is an error in command line arguments", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "raised when there is an error in command line arguments", "final_sentence": "raised when there is an error in command line arguments"}
{"comment_sentence_id": 1607, "class": "BooleanArray", "comment_sentence": "length 3, dtype boolean", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "length 3 dtype boolean", "final_sentence": "length 3 dtype boolean"}
{"comment_sentence_id": 4478, "class": "BCEWithLogitsLoss", "comment_sentence": "this is used for measuring the error of a reconstruction in for example", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "this is used for measuring the error of a reconstruction in for example", "final_sentence": "this is used for measuring the error of a reconstruction in for example"}
{"comment_sentence_id": 2408, "class": "Argument", "comment_sentence": "arguments are positional parameters to a command.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "arguments are positional parameters to a command", "final_sentence": "arguments are positional parameters to a command"}
{"comment_sentence_id": 3426, "class": "Option", "comment_sentence": "param help the help string.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "param help the help string", "final_sentence": "param help the help string"}
{"comment_sentence_id": 1706, "class": "CategoricalIndex", "comment_sentence": "also,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "also", "final_sentence": "also"}
{"comment_sentence_id": 549, "class": "MigrationLoader", "comment_sentence": "these are loaded into a separate set of migrations away from the main ones.", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "these are loaded into a separate set of migrations away from the main ones", "final_sentence": "these are loaded into a separate set of migrations away from the main ones"}
{"comment_sentence_id": 4388, "class": "BatchNorm1d", "comment_sentence": "module tracks the running mean and variance, and when set to false ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "module tracks the running mean and variance and when set to false", "final_sentence": "module tracks the running mean and variance and when set to false"}
{"comment_sentence_id": 5123, "class": "EmbeddingBag", "comment_sentence": "tensor 08861, 54350, 00523 ,", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "tensor 08861 54350 00523", "final_sentence": "tensor 08861 54350 00523"}
{"comment_sentence_id": 4147, "class": "_OpNamespace", "comment_sentence": "call this op, the user will write torch^ops.my namespace^my op .", "partition": 1, "instance_type": 1, "category": "DevelopmentNotes", "pre_sentence": "call this op the user will write torch ops my namespace my op", "final_sentence": "call this op the user will write torch ops my namespace my op"}
{"comment_sentence_id": 639, "class": "MultiValueField", "comment_sentence": "field, etc once all fields are cleaned, the list of clean values is", "partition": 1, "instance_type": 0, "category": "DevelopmentNotes", "pre_sentence": "field etc once all fields are cleaned the list of clean values is", "final_sentence": "field etc once all fields are cleaned the list of clean values is"}

{"comment_sentence_id": 2375, "class": "_MovedItems", "comment_sentence": "lazy loading of moved objects", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "lazy loading of moved objects", "final_sentence": "lazy loading of moved objects"}
{"comment_sentence_id": 4390, "class": "BatchNorm1d", "comment_sentence": "statistics in both training and eval modes.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "statistics in both training and eval modes", "final_sentence": "statistics in both training and eval modes"}
{"comment_sentence_id": 5266, "class": "LBFGS", "comment_sentence": "value parameter changes default 1e 9 .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "value parameter changes default 1e 9", "final_sentence": "value parameter changes default 1e 9"}
{"comment_sentence_id": 1649, "class": "CategoricalDtype", "comment_sentence": "ordered bool or none, default false", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "ordered bool or none default false", "final_sentence": "ordered bool or none default false"}
{"comment_sentence_id": 2360, "class": "_BZ2Proxy", "comment_sentence": "a workaround for a limitation in bz2 module s bz2file", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a workaround for a limitation in bz2 module s bz2file", "final_sentence": "a workaround for a limitation in bz2 module s bz2file"}
{"comment_sentence_id": 3708, "class": "PrefixLoader", "comment_sentence": "by loading app2 index^html the file from the second.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "by loading app2 index html the file from the second", "final_sentence": "by loading app2 index html the file from the second"}
{"comment_sentence_id": 3409, "class": "Option", "comment_sentence": "param is flag forces this option to act as a flag.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "param is flag forces this option to act as a flag", "final_sentence": "param is flag forces this option to act as a flag"}
{"comment_sentence_id": 1287, "class": "ConfigDict", "comment_sentence": "values of the type specified.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "values of the type specified", "final_sentence": "values of the type specified"}
{"comment_sentence_id": 2049, "class": "PlotAccessor", "comment_sentence": "colorbar bool, optional", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "colorbar bool optional", "final_sentence": "colorbar bool optional"}
{"comment_sentence_id": 654, "class": "MultiWidget", "comment_sentence": "a widget that is composed of multiple widgets.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a widget that is composed of multiple widgets", "final_sentence": "a widget that is composed of multiple widgets"}
{"comment_sentence_id": 4276, "class": "Adamax", "comment_sentence": "params iterable iterable of parameters to optimize or dicts defining", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "params iterable iterable of parameters to optimize or dicts defining", "final_sentence": "params iterable iterable of parameters to optimize or dicts defining"}
{"comment_sentence_id": 134, "class": "BaseCommand", "comment_sentence": "requires system checks", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "requires system checks", "final_sentence": "requires system checks"}
{"comment_sentence_id": 3312, "class": "omdict", "comment_sentence": "dictionary, self.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "dictionary self", "final_sentence": "dictionary self"}
{"comment_sentence_id": 3420, "class": "Option", "comment_sentence": "arguments.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "arguments", "final_sentence": "arguments"}
{"comment_sentence_id": 1281, "class": "ConfigDict", "comment_sentence": "to be dictionaries or lists of items that match the rules defined.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "to be dictionaries or lists of items that match the rules defined", "final_sentence": "to be dictionaries or lists of items that match the rules defined"}
{"comment_sentence_id": 5343, "class": "MultiLabelMarginLoss", "comment_sentence": "is set to false , the losses are instead summed for each minibatch.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "is set to false the losses are instead summed for each minibatch", "final_sentence": "is set to false the losses are instead summed for each minibatch"}
{"comment_sentence_id": 1303, "class": "ConfigDict", "comment_sentence": "pot potatoes", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot potatoes", "final_sentence": "pot potatoes"}
{"comment_sentence_id": 603, "class": "MultiValueDict", "comment_sentence": "d^getlist name", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "d getlist name", "final_sentence": "d getlist name"}
{"comment_sentence_id": 517, "class": "MigrationGraph", "comment_sentence": "or not present, it should ignore the replaced ones, load in just the", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "or not present it should ignore the replaced ones load in just the", "final_sentence": "or not present it should ignore the replaced ones load in just the"}
{"comment_sentence_id": 1673, "class": "CategoricalDtype", "comment_sentence": "dtype category", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "dtype category", "final_sentence": "dtype category"}
{"comment_sentence_id": 4351, "class": "BatchNorm1d", "comment_sentence": "the mean and standard deviation are calculated per dimension over", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the mean and standard deviation are calculated per dimension over", "final_sentence": "the mean and standard deviation are calculated per dimension over"}
{"comment_sentence_id": 5358, "class": "MultiLabelMarginLoss", "comment_sentence": "elements in the output, sum the output will be summed.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "elements in the output sum the output will be summed", "final_sentence": "elements in the output sum the output will be summed"}
{"comment_sentence_id": 4370, "class": "BatchNorm1d", "comment_sentence": "where math hat x is the estimated statistic and math x t is the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "where math hat x is the estimated statistic and math x t is the", "final_sentence": "where math hat x is the estimated statistic and math x t is the"}
{"comment_sentence_id": 965, "class": "Audio", "comment_sentence": "dataright np^sin 2 np^pi 224 t", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "dataright np sin 2 np pi 224 t", "final_sentence": "dataright np sin 2 np pi 224 t"}
{"comment_sentence_id": 1600, "class": "BooleanArray", "comment_sentence": "returns", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "returns", "final_sentence": "returns"}
{"comment_sentence_id": 4215, "class": "Adadelta", "comment_sentence": "params iterable iterable of parameters to optimize or dicts defining", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "params iterable iterable of parameters to optimize or dicts defining", "final_sentence": "params iterable iterable of parameters to optimize or dicts defining"}
{"comment_sentence_id": 3189, "class": "MemcachedBytecodeCache", "comment_sentence": "exist in the cache the return value must be none .", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "exist in the cache the return value must be none", "final_sentence": "exist in the cache the return value must be none"}
{"comment_sentence_id": 4687, "class": "ConstantPad3d", "comment_sentence": "input torch^randn 16, 3, 10, 20, 30", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "input torch randn 16 3 10 20 30", "final_sentence": "input torch randn 16 3 10 20 30"}
{"comment_sentence_id": 5488, "class": "QuantWrapper", "comment_sentence": "dequantstub and surround the call to module with call to quant and dequant", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "dequantstub and surround the call to module with call to quant and dequant", "final_sentence": "dequantstub and surround the call to module with call to quant and dequant"}
{"comment_sentence_id": 1665, "class": "CategoricalDtype", "comment_sentence": "for more.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "for more", "final_sentence": "for more"}
{"comment_sentence_id": 5489, "class": "QuantWrapper", "comment_sentence": "modules.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "modules", "final_sentence": "modules"}
{"comment_sentence_id": 971, "class": "Audio", "comment_sentence": "audio b raw wav data.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "audio b raw wav data", "final_sentence": "audio b raw wav data"}
{"comment_sentence_id": 538, "class": "MigrationLoader", "comment_sentence": "load migration files from disk and their status from the database.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "load migration files from disk and their status from the database", "final_sentence": "load migration files from disk and their status from the database"}
{"comment_sentence_id": 2086, "class": "PlotAccessor", "comment_sentence": "notes", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "notes", "final_sentence": "notes"}
{"comment_sentence_id": 5292, "class": "Module", "comment_sentence": "import torch^nn as nn", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "import torch nn as nn", "final_sentence": "import torch nn as nn"}
{"comment_sentence_id": 1578, "class": "BooleanArray", "comment_sentence": "logic for logical operations.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "logic for logical operations", "final_sentence": "logic for logical operations"}
{"comment_sentence_id": 1081, "class": "InteractiveShellApp", "comment_sentence": "meth init path", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "meth init path", "final_sentence": "meth init path"}
{"comment_sentence_id": 5449, "class": "OneHotCategorical", "comment_sentence": "args", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "args", "final_sentence": "args"}
{"comment_sentence_id": 2444, "class": "CaseInsensitiveDict", "comment_sentence": "provides lower items .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "provides lower items", "final_sentence": "provides lower items"}
{"comment_sentence_id": 2557, "class": "Distribution", "comment_sentence": "a base class for distributions, whether installed or from indexes.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a base class for distributions whether installed or from indexes", "final_sentence": "a base class for distributions whether installed or from indexes"}
{"comment_sentence_id": 1132, "class": "MyFrame", "comment_sentence": "this is myframe.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this is myframe", "final_sentence": "this is myframe"}
{"comment_sentence_id": 3264, "class": "NotAny", "comment_sentence": "and, or, not map caselesskeyword, and or not ^split", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "and or not map caselesskeyword and or not split", "final_sentence": "and or not map caselesskeyword and or not split"}
{"comment_sentence_id": 4106, "class": "TarFile", "comment_sentence": "the tarfile class provides an interface to tar archives.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the tarfile class provides an interface to tar archives", "final_sentence": "the tarfile class provides an interface to tar archives"}
{"comment_sentence_id": 3329, "class": "omdict", "comment_sentence": "items , values , iteritems , itervalues", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "items values iteritems itervalues", "final_sentence": "items values iteritems itervalues"}
{"comment_sentence_id": 1293, "class": "ConfigDict", "comment_sentence": "liquids fluids we like , false,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "liquids fluids we like false", "final_sentence": "liquids fluids we like false"}
{"comment_sentence_id": 5258, "class": "LBFGS", "comment_sentence": "lr float learning rate default 1", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "lr float learning rate default 1", "final_sentence": "lr float learning rate default 1"}
{"comment_sentence_id": 2072, "class": "PlotAccessor", "comment_sentence": "backend str, default none", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "backend str default none", "final_sentence": "backend str default none"}
{"comment_sentence_id": 4145, "class": "_OpNamespace", "comment_sentence": "say a user has created a custom operator called my namespace my op .", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "say a user has created a custom operator called my namespace my op", "final_sentence": "say a user has created a custom operator called my namespace my op"}
{"comment_sentence_id": 1143, "class": "Struct", "comment_sentence": "this dict subclass has a a few extra features", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this dict subclass has a a few extra features", "final_sentence": "this dict subclass has a a few extra features"}
{"comment_sentence_id": 1311, "class": "ConfigDict", "comment_sentence": "pot^walk liquids vodka , parent true", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot walk liquids vodka parent true", "final_sentence": "pot walk liquids vodka parent true"}
{"comment_sentence_id": 4356, "class": "BatchNorm1d", "comment_sentence": "also by default, during training this layer keeps running estimates of its", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "also by default during training this layer keeps running estimates of its", "final_sentence": "also by default during training this layer keeps running estimates of its"}
{"comment_sentence_id": 2057, "class": "PlotAccessor", "comment_sentence": "table bool, series or dataframe, default false", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "table bool series or dataframe default false", "final_sentence": "table bool series or dataframe default false"}
{"comment_sentence_id": 3226, "class": "MethodDispatcher", "comment_sentence": "dict with 2 special properties", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "dict with 2 special properties", "final_sentence": "dict with 2 special properties"}
{"comment_sentence_id": 5493, "class": "QuantWrapper", "comment_sentence": "will be swapped to nnq^quantize which does actual quantization.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "will be swapped to nnq quantize which does actual quantization", "final_sentence": "will be swapped to nnq quantize which does actual quantization"}
{"comment_sentence_id": 1590, "class": "BooleanArray", "comment_sentence": "a 1 d boolean dtype array with the data.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a 1 d boolean dtype array with the data", "final_sentence": "a 1 d boolean dtype array with the data"}
{"comment_sentence_id": 4380, "class": "BatchNorm1d", "comment_sentence": "computation.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "computation", "final_sentence": "computation"}
{"comment_sentence_id": 5937, "class": "PreparedRequest", "comment_sentence": "import requests", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "import requests", "final_sentence": "import requests"}
{"comment_sentence_id": 1317, "class": "ConfigDict", "comment_sentence": "red , blue , red , red", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "red blue red red", "final_sentence": "red blue red red"}
{"comment_sentence_id": 1299, "class": "ConfigDict", "comment_sentence": "colors colors , red , blue ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "colors colors red blue", "final_sentence": "colors colors red blue"}
{"comment_sentence_id": 3406, "class": "Option", "comment_sentence": "hidden from the user.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "hidden from the user", "final_sentence": "hidden from the user"}
{"comment_sentence_id": 4212, "class": "Adadelta", "comment_sentence": "implements adadelta algorithm.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "implements adadelta algorithm", "final_sentence": "implements adadelta algorithm"}
{"comment_sentence_id": 3304, "class": "omdict", "comment_sentence": "ordered multivalue dictionary.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "ordered multivalue dictionary", "final_sentence": "ordered multivalue dictionary"}
{"comment_sentence_id": 2358, "class": "_BZ2Proxy", "comment_sentence": "support for r bz2 and w bz2 modes.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "support for r bz2 and w bz2 modes", "final_sentence": "support for r bz2 and w bz2 modes"}
{"comment_sentence_id": 1320, "class": "ConfigDict", "comment_sentence": "pot tags 0 c", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot tags 0 c", "final_sentence": "pot tags 0 c"}
{"comment_sentence_id": 1315, "class": "ConfigDict", "comment_sentence": "pot colors ^extend blue , red , red", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot colors extend blue red red", "final_sentence": "pot colors extend blue red red"}
{"comment_sentence_id": 1307, "class": "ConfigDict", "comment_sentence": "pot carrots", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot carrots", "final_sentence": "pot carrots"}
{"comment_sentence_id": 3187, "class": "MemcachedBytecodeCache", "comment_sentence": "returns the value for the cache key.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "returns the value for the cache key", "final_sentence": "returns the value for the cache key"}
{"comment_sentence_id": 2073, "class": "PlotAccessor", "comment_sentence": "backend to use instead of the backend specified in the option", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "backend to use instead of the backend specified in the option", "final_sentence": "backend to use instead of the backend specified in the option"}
{"comment_sentence_id": 2574, "class": "Environment", "comment_sentence": "will lead to surprising effects and undefined behavior.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "will lead to surprising effects and undefined behavior", "final_sentence": "will lead to surprising effects and undefined behavior"}
{"comment_sentence_id": 2570, "class": "Environment", "comment_sentence": "globals and others.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "globals and others", "final_sentence": "globals and others"}
{"comment_sentence_id": 4148, "class": "_OpNamespace", "comment_sentence": ".", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": NaN, "final_sentence": "nan"}
{"comment_sentence_id": 4250, "class": "Adam", "comment_sentence": "default false", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "default false", "final_sentence": "default false"}
{"comment_sentence_id": 1145, "class": "Struct", "comment_sentence": "protection of class members like keys, items when using attribute", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "protection of class members like keys items when using attribute", "final_sentence": "protection of class members like keys items when using attribute"}
{"comment_sentence_id": 3162, "class": "MemcachedBytecodeCache", "comment_sentence": "storing the information.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "storing the information", "final_sentence": "storing the information"}
{"comment_sentence_id": 2424, "class": "Bucket", "comment_sentence": "and initialized by the bytecode cache and passed to the loading functions.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "and initialized by the bytecode cache and passed to the loading functions", "final_sentence": "and initialized by the bytecode cache and passed to the loading functions"}
{"comment_sentence_id": 4384, "class": "BatchNorm1d", "comment_sentence": "affine a boolean value that when set to true , this module has", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "affine a boolean value that when set to true this module has", "final_sentence": "affine a boolean value that when set to true this module has"}
{"comment_sentence_id": 5260, "class": "LBFGS", "comment_sentence": "default 20", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "default 20", "final_sentence": "default 20"}
{"comment_sentence_id": 2511, "class": "Context_", "comment_sentence": "keys , values , items , iterkeys , itervalues , iteritems ,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "keys values items iterkeys itervalues iteritems", "final_sentence": "keys values items iterkeys itervalues iteritems"}
{"comment_sentence_id": 4346, "class": "BatchNorm1d", "comment_sentence": "applies batch normalization over a 2d or 3d input a mini batch of 1d", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "applies batch normalization over a 2d or 3d input a mini batch of 1d", "final_sentence": "applies batch normalization over a 2d or 3d input a mini batch of 1d"}
{"comment_sentence_id": 3272, "class": "NotAny", "comment_sentence": "are actually floats", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "are actually floats", "final_sentence": "are actually floats"}
{"comment_sentence_id": 3605, "class": "Path", "comment_sentence": "secondly, it can perform various", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "secondly it can perform various", "final_sentence": "secondly it can perform various"}
{"comment_sentence_id": 2248, "class": "StringArray", "comment_sentence": "stringarray is considered experimental.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "stringarray is considered experimental", "final_sentence": "stringarray is considered experimental"}
{"comment_sentence_id": 5350, "class": "MultiLabelMarginLoss", "comment_sentence": "on attr size average .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "on attr size average", "final_sentence": "on attr size average"}
{"comment_sentence_id": 2513, "class": "Context_", "comment_sentence": "additionally there is a meth resolve", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "additionally there is a meth resolve", "final_sentence": "additionally there is a meth resolve"}
{"comment_sentence_id": 1079, "class": "InteractiveShellApp", "comment_sentence": "the following methods should be called by the meth initialize method", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the following methods should be called by the meth initialize method", "final_sentence": "the following methods should be called by the meth initialize method"}
{"comment_sentence_id": 3193, "class": "MemcachedBytecodeCache", "comment_sentence": "we recommend a high or no timeout.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "we recommend a high or no timeout", "final_sentence": "we recommend a high or no timeout"}
{"comment_sentence_id": 121, "class": "BaseCommand", "comment_sentence": "several attributes affect behavior at various steps along the way", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "several attributes affect behavior at various steps along the way", "final_sentence": "several attributes affect behavior at various steps along the way"}
{"comment_sentence_id": 139, "class": "BaseCommand", "comment_sentence": "rather than all applications models, call", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "rather than all applications models call", "final_sentence": "rather than all applications models call"}
{"comment_sentence_id": 62, "class": "AutoFieldMeta", "comment_sentence": "metaclass to maintain backward inheritance compatibility for autofield.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "metaclass to maintain backward inheritance compatibility for autofield", "final_sentence": "metaclass to maintain backward inheritance compatibility for autofield"}
{"comment_sentence_id": 1703, "class": "CategoricalIndex", "comment_sentence": "index based on an underlying class categorical .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "index based on an underlying class categorical", "final_sentence": "index based on an underlying class categorical"}
{"comment_sentence_id": 637, "class": "MultiValueField", "comment_sentence": "this list is cleaned by the corresponding field the first value is", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this list is cleaned by the corresponding field the first value is", "final_sentence": "this list is cleaned by the corresponding field the first value is"}
{"comment_sentence_id": 5341, "class": "MultiLabelMarginLoss", "comment_sentence": "some losses, there are multiple elements per sample.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "some losses there are multiple elements per sample", "final_sentence": "some losses there are multiple elements per sample"}
{"comment_sentence_id": 3244, "class": "Module_six_moves_urllib_response", "comment_sentence": "lazy loading of moved objects in six^moves.urllib response", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "lazy loading of moved objects in six moves urllib response", "final_sentence": "lazy loading of moved objects in six moves urllib response"}
{"comment_sentence_id": 2370, "class": "_FileInFile", "comment_sentence": "provides a part of its data as an individual file", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "provides a part of its data as an individual file", "final_sentence": "provides a part of its data as an individual file"}
{"comment_sentence_id": 5438, "class": "OneHotCategorical", "comment_sentence": "creates a one hot categorical distribution parameterized by attr probs or", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "creates a one hot categorical distribution parameterized by attr probs or", "final_sentence": "creates a one hot categorical distribution parameterized by attr probs or"}
{"comment_sentence_id": 2369, "class": "_FileInFile", "comment_sentence": "a thin wrapper around an existing file object that", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a thin wrapper around an existing file object that", "final_sentence": "a thin wrapper around an existing file object that"}
{"comment_sentence_id": 3601, "class": "Path", "comment_sentence": "the path type is similar to the class file type but it performs", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the path type is similar to the class file type but it performs", "final_sentence": "the path type is similar to the class file type but it performs"}
{"comment_sentence_id": 1603, "class": "BooleanArray", "comment_sentence": "create an booleanarray with func pandas^array", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "create an booleanarray with func pandas array", "final_sentence": "create an booleanarray with func pandas array"}
{"comment_sentence_id": 4378, "class": "BatchNorm1d", "comment_sentence": "default 1e 5", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "default 1e 5", "final_sentence": "default 1e 5"}
{"comment_sentence_id": 4643, "class": "BuildType", "comment_sentence": "os^environ cmake build type will be used.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "os environ cmake build type will be used", "final_sentence": "os environ cmake build type will be used"}
{"comment_sentence_id": 973, "class": "Audio", "comment_sentence": "# from bytes", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "from bytes", "final_sentence": "from bytes"}
{"comment_sentence_id": 2063, "class": "PlotAccessor", "comment_sentence": "see ref plotting with error bars visualization^errorbars for", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "see ref plotting with error bars visualization errorbars for", "final_sentence": "see ref plotting with error bars visualization errorbars for"}
{"comment_sentence_id": 3327, "class": "omdict", "comment_sentence": "an optional", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "an optional", "final_sentence": "an optional"}
{"comment_sentence_id": 3183, "class": "MemcachedBytecodeCache", "comment_sentence": "a default timeout or no timeout should be assumed, if it s", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "a default timeout or no timeout should be assumed if it s", "final_sentence": "a default timeout or no timeout should be assumed if it s"}
{"comment_sentence_id": 5931, "class": "InvalidHeader", "comment_sentence": "the header value provided was somehow invalid.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the header value provided was somehow invalid", "final_sentence": "the header value provided was somehow invalid"}
{"comment_sentence_id": 1653, "class": "CategoricalDtype", "comment_sentence": "false if there is no existing ordered to maintain.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "false if there is no existing ordered to maintain", "final_sentence": "false if there is no existing ordered to maintain"}
{"comment_sentence_id": 3185, "class": "MemcachedBytecodeCache", "comment_sentence": "item should exist.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "item should exist", "final_sentence": "item should exist"}
{"comment_sentence_id": 3270, "class": "NotAny", "comment_sentence": "boolean expr boolean term zeroormore and or boolean term", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "boolean expr boolean term zeroormore and or boolean term", "final_sentence": "boolean expr boolean term zeroormore and or boolean term"}
{"comment_sentence_id": 117, "class": "BaseCommand", "comment_sentence": "subclasses many built in commands and command types either place", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "subclasses many built in commands and command types either place", "final_sentence": "subclasses many built in commands and command types either place"}
{"comment_sentence_id": 2515, "class": "Context_", "comment_sentence": "class undefined object for missing variables.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "class undefined object for missing variables", "final_sentence": "class undefined object for missing variables"}
{"comment_sentence_id": 3401, "class": "Option", "comment_sentence": "if set to true the prompt will be the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if set to true the prompt will be the", "final_sentence": "if set to true the prompt will be the"}
{"comment_sentence_id": 5494, "class": "QuantWrapper", "comment_sentence": "similarly", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "similarly", "final_sentence": "similarly"}
{"comment_sentence_id": 3268, "class": "NotAny", "comment_sentence": "# very crude boolean expression to support parenthesis groups and", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "very crude boolean expression to support parenthesis groups and", "final_sentence": "very crude boolean expression to support parenthesis groups and"}
{"comment_sentence_id": 2572, "class": "Environment", "comment_sentence": "they are not shared and if no template was loaded so far.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "they are not shared and if no template was loaded so far", "final_sentence": "they are not shared and if no template was loaded so far"}
{"comment_sentence_id": 3706, "class": "PrefixLoader", "comment_sentence": "app2 packageloader mypackage^app2", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "app2 packageloader mypackage app2", "final_sentence": "app2 packageloader mypackage app2"}
{"comment_sentence_id": 3260, "class": "NotAny", "comment_sentence": "notany always returns", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "notany always returns", "final_sentence": "notany always returns"}
{"comment_sentence_id": 3749, "class": "Request", "comment_sentence": "import requests", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "import requests", "final_sentence": "import requests"}
{"comment_sentence_id": 598, "class": "MultiValueDict", "comment_sentence": "a subclass of dictionary customized to handle multiple values for the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a subclass of dictionary customized to handle multiple values for the", "final_sentence": "a subclass of dictionary customized to handle multiple values for the"}
{"comment_sentence_id": 210, "class": "BaseExpression", "comment_sentence": "base class for all query expressions.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "base class for all query expressions", "final_sentence": "base class for all query expressions"}
{"comment_sentence_id": 2088, "class": "PlotAccessor", "comment_sentence": "if kind bar or barh , you can specify relative alignments", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if kind bar or barh you can specify relative alignments", "final_sentence": "if kind bar or barh you can specify relative alignments"}
{"comment_sentence_id": 3471, "class": "PacifyFlushWrapper", "comment_sentence": "this wrapper is used to catch and suppress brokenpipeerrors resulting", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this wrapper is used to catch and suppress brokenpipeerrors resulting", "final_sentence": "this wrapper is used to catch and suppress brokenpipeerrors resulting"}
{"comment_sentence_id": 4358, "class": "BatchNorm1d", "comment_sentence": "evaluation.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "evaluation", "final_sentence": "evaluation"}
{"comment_sentence_id": 5487, "class": "QuantWrapper", "comment_sentence": "a wrapper class that wraps the input module, adds quantstub and", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a wrapper class that wraps the input module adds quantstub and", "final_sentence": "a wrapper class that wraps the input module adds quantstub and"}
{"comment_sentence_id": 88, "class": "BaseCommand", "comment_sentence": "the base class from which all management commands ultimately", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the base class from which all management commands ultimately", "final_sentence": "the base class from which all management commands ultimately"}
{"comment_sentence_id": 5759, "class": "Unfold", "comment_sentence": "input math n, c,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "input math n c", "final_sentence": "input math n c"}
{"comment_sentence_id": 5761, "class": "Unfold", "comment_sentence": "examples", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 2329, "class": "StringMethods", "comment_sentence": "s^str.replace ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "s str replace", "final_sentence": "s str replace"}
{"comment_sentence_id": 2489, "class": "ColoredString", "comment_sentence": "enhanced string for len operations on colored output.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "enhanced string for len operations on colored output", "final_sentence": "enhanced string for len operations on colored output"}
{"comment_sentence_id": 23, "class": "Atomic", "comment_sentence": "and rolls back the transaction or to the savepoint on exceptions.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "and rolls back the transaction or to the savepoint on exceptions", "final_sentence": "and rolls back the transaction or to the savepoint on exceptions"}
{"comment_sentence_id": 5294, "class": "Module", "comment_sentence": "class model nn^module", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "class model nn module", "final_sentence": "class model nn module"}
{"comment_sentence_id": 1592, "class": "BooleanArray", "comment_sentence": "a 1 d boolean dtype array indicating missing values true", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a 1 d boolean dtype array indicating missing values true", "final_sentence": "a 1 d boolean dtype array indicating missing values true"}
{"comment_sentence_id": 202, "class": "BaseDatabaseSchemaEditor", "comment_sentence": "statements to the databases model creation removal alteration, field", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "statements to the databases model creation removal alteration field", "final_sentence": "statements to the databases model creation removal alteration field"}
{"comment_sentence_id": 1651, "class": "CategoricalDtype", "comment_sentence": "none can be used to maintain the ordered value of existing categoricals when", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "none can be used to maintain the ordered value of existing categoricals when", "final_sentence": "none can be used to maintain the ordered value of existing categoricals when"}
{"comment_sentence_id": 3080, "class": "Markup", "comment_sentence": "markup hello, em world em !", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "markup hello em world em", "final_sentence": "markup hello em world em"}
{"comment_sentence_id": 3095, "class": "Markup", "comment_sentence": "unicode in python 2 .", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "unicode in python 2", "final_sentence": "unicode in python 2"}
{"comment_sentence_id": 3323, "class": "omdict", "comment_sentence": "getitem , setitem , delitem , contains ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "getitem setitem delitem contains", "final_sentence": "getitem setitem delitem contains"}
{"comment_sentence_id": 3073, "class": "Markup", "comment_sentence": "document, either because it was escaped or because it was marked", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "document either because it was escaped or because it was marked", "final_sentence": "document either because it was escaped or because it was marked"}
{"comment_sentence_id": 90, "class": "BaseCommand", "comment_sentence": "use this class if you want access to all of the mechanisms which", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "use this class if you want access to all of the mechanisms which", "final_sentence": "use this class if you want access to all of the mechanisms which"}
{"comment_sentence_id": 961, "class": "Audio", "comment_sentence": "data np^sin 2 np^pi 220 t np^sin 2 np^pi 224 t", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "data np sin 2 np pi 220 t np sin 2 np pi 224 t", "final_sentence": "data np sin 2 np pi 220 t np sin 2 np pi 224 t"}
{"comment_sentence_id": 3602, "class": "Path", "comment_sentence": "different checks.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "different checks", "final_sentence": "different checks"}
{"comment_sentence_id": 130, "class": "BaseCommand", "comment_sentence": "false .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "false", "final_sentence": "false"}
{"comment_sentence_id": 2051, "class": "PlotAccessor", "comment_sentence": "plots .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "plots", "final_sentence": "plots"}
{"comment_sentence_id": 3084, "class": "Markup", "comment_sentence": "markup hello &lt em&gt world&lt em&gt !", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "markup hello lt em gt world lt em gt", "final_sentence": "markup hello lt em gt world lt em gt"}
{"comment_sentence_id": 2065, "class": "PlotAccessor", "comment_sentence": "xerr dataframe, series, array like, dict and str", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "xerr dataframe series array like dict and str", "final_sentence": "xerr dataframe series array like dict and str"}
{"comment_sentence_id": 1147, "class": "Struct", "comment_sentence": "the ability to restrict assignment to only existing keys.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the ability to restrict assignment to only existing keys", "final_sentence": "the ability to restrict assignment to only existing keys"}
{"comment_sentence_id": 97, "class": "BaseCommand", "comment_sentence": "1", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "1", "final_sentence": "1"}
{"comment_sentence_id": 21, "class": "Atomic", "comment_sentence": "savepoint, depending on whether a transaction is already in progress, and", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "savepoint depending on whether a transaction is already in progress and", "final_sentence": "savepoint depending on whether a transaction is already in progress and"}
{"comment_sentence_id": 1445, "class": "Event", "comment_sentence": "actual interpretation and", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "actual interpretation and", "final_sentence": "actual interpretation and"}
{"comment_sentence_id": 1442, "class": "EncryptedUnicodeDict", "comment_sentence": "encrypteddict which only deals in unicode values.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "encrypteddict which only deals in unicode values", "final_sentence": "encrypteddict which only deals in unicode values"}
{"comment_sentence_id": 2440, "class": "CaseInsensitiveDict", "comment_sentence": "a case insensitive dict like object.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a case insensitive dict like object", "final_sentence": "a case insensitive dict like object"}
{"comment_sentence_id": 3397, "class": "Option", "comment_sentence": "normally, environment variables", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "normally environment variables", "final_sentence": "normally environment variables"}
{"comment_sentence_id": 2092, "class": "PlotAccessor", "comment_sentence": "center", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "center", "final_sentence": "center"}
{"comment_sentence_id": 3604, "class": "Path", "comment_sentence": "handle it returns just the filename.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "handle it returns just the filename", "final_sentence": "handle it returns just the filename"}
{"comment_sentence_id": 3407, "class": "Option", "comment_sentence": "this is useful for password", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this is useful for password", "final_sentence": "this is useful for password"}
{"comment_sentence_id": 611, "class": "MultiValueDict", "comment_sentence": "this class exists to solve the irritating problem raised by cgi^parse qs,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this class exists to solve the irritating problem raised by cgi parse qs", "final_sentence": "this class exists to solve the irritating problem raised by cgi parse qs"}
{"comment_sentence_id": 4217, "class": "Adadelta", "comment_sentence": "rho float, optional coefficient used for computing a running average", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "rho float optional coefficient used for computing a running average", "final_sentence": "rho float optional coefficient used for computing a running average"}
{"comment_sentence_id": 554, "class": "MigrationLoader", "comment_sentence": "this does mean that this class must also talk to the database as well as", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this does mean that this class must also talk to the database as well as", "final_sentence": "this does mean that this class must also talk to the database as well as"}
{"comment_sentence_id": 4364, "class": "BatchNorm1d", "comment_sentence": "note", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "note", "final_sentence": "note"}
{"comment_sentence_id": 5767, "class": "Unfold", "comment_sentence": "output^size", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "output size", "final_sentence": "output size"}
{"comment_sentence_id": 3389, "class": "Option", "comment_sentence": "help page.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "help page", "final_sentence": "help page"}
{"comment_sentence_id": 3320, "class": "omdict", "comment_sentence": "all dict methods that retain parity with omdict are", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "all dict methods that retain parity with omdict are", "final_sentence": "all dict methods that retain parity with omdict are"}
{"comment_sentence_id": 3676, "class": "PoolManager", "comment_sentence": "example", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "example", "final_sentence": "example"}
{"comment_sentence_id": 3179, "class": "MemcachedBytecodeCache", "comment_sentence": "stores the bytecode in the cache.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "stores the bytecode in the cache", "final_sentence": "stores the bytecode in the cache"}
{"comment_sentence_id": 4348, "class": "BatchNorm1d", "comment_sentence": "batch normalization accelerating deep network training by reducing internal covariate shift .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "batch normalization accelerating deep network training by reducing internal covariate shift", "final_sentence": "batch normalization accelerating deep network training by reducing internal covariate shift"}
{"comment_sentence_id": 3426, "class": "Option", "comment_sentence": "param help the help string.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "param help the help string", "final_sentence": "param help the help string"}
{"comment_sentence_id": 3252, "class": "NoMatch", "comment_sentence": "a token that will never match.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a token that will never match", "final_sentence": "a token that will never match"}
{"comment_sentence_id": 1327, "class": "ConfigDict", "comment_sentence": "invalidkeyerror invalid key for config evil", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "invalidkeyerror invalid key for config evil", "final_sentence": "invalidkeyerror invalid key for config evil"}
{"comment_sentence_id": 546, "class": "MigrationLoader", "comment_sentence": "see", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "see", "final_sentence": "see"}
{"comment_sentence_id": 4154, "class": "_OpNamespace", "comment_sentence": "on the torch^ops object, which will create a new opnamespace", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "on the torch ops object which will create a new opnamespace", "final_sentence": "on the torch ops object which will create a new opnamespace"}
{"comment_sentence_id": 5252, "class": "LBFGS", "comment_sentence": "note", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "note", "final_sentence": "note"}
{"comment_sentence_id": 5304, "class": "Module", "comment_sentence": "parameters converted too when you call meth to , etc", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "parameters converted too when you call meth to etc", "final_sentence": "parameters converted too when you call meth to etc"}
{"comment_sentence_id": 5712, "class": "Unfold", "comment_sentence": "spatial dimensions.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "spatial dimensions", "final_sentence": "spatial dimensions"}
{"comment_sentence_id": 1044, "class": "CapturingDisplayPublisher", "comment_sentence": "a displaypublisher that store", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a displaypublisher that store", "final_sentence": "a displaypublisher that store"}
{"comment_sentence_id": 4299, "class": "AdaptiveMaxPool3d", "comment_sentence": "args", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "args", "final_sentence": "args"}
{"comment_sentence_id": 5214, "class": "ExternalInitializer", "comment_sentence": "current version is not doing any real sanity checks to the parameter.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "current version is not doing any real sanity checks to the parameter", "final_sentence": "current version is not doing any real sanity checks to the parameter"}
{"comment_sentence_id": 3093, "class": "Markup", "comment_sentence": "markup a href foo foo a", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "markup a href foo foo a", "final_sentence": "markup a href foo foo a"}
{"comment_sentence_id": 63, "class": "AutoFieldMeta", "comment_sentence": "it is intended that autofieldmixin become public api when it is possible to", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "it is intended that autofieldmixin become public api when it is possible to", "final_sentence": "it is intended that autofieldmixin become public api when it is possible to"}
{"comment_sentence_id": 4360, "class": "BatchNorm1d", "comment_sentence": "of 01.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "of 01", "final_sentence": "of 01"}
{"comment_sentence_id": 3747, "class": "Request", "comment_sentence": "param hooks dictionary of callback hooks, for internal usage.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "param hooks dictionary of callback hooks for internal usage", "final_sentence": "param hooks dictionary of callback hooks for internal usage"}
{"comment_sentence_id": 7, "class": "AppConfigStub", "comment_sentence": "stub of an appconfig.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "stub of an appconfig", "final_sentence": "stub of an appconfig"}
{"comment_sentence_id": 1313, "class": "ConfigDict", "comment_sentence": "pot colors ^append red", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot colors append red", "final_sentence": "pot colors append red"}
{"comment_sentence_id": 1301, "class": "ConfigDict", "comment_sentence": "colors , liquids , tags , , ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "colors liquids tags", "final_sentence": "colors liquids tags"}
{"comment_sentence_id": 5765, "class": "Unfold", "comment_sentence": "# each patch contains 30 values 2x3 6 vectors, each of 5 channels", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "each patch contains 30 values 2x3 6 vectors each of 5 channels", "final_sentence": "each patch contains 30 values 2x3 6 vectors each of 5 channels"}
{"comment_sentence_id": 3316, "class": "omdict", "comment_sentence": "key.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "key", "final_sentence": "key"}
{"comment_sentence_id": 1667, "class": "CategoricalDtype", "comment_sentence": "t pd^categoricaldtype categories b , a , ordered true", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "t pd categoricaldtype categories b a ordered true", "final_sentence": "t pd categoricaldtype categories b a ordered true"}
{"comment_sentence_id": 65, "class": "AutoFieldMeta", "comment_sentence": "stored in the database.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "stored in the database", "final_sentence": "stored in the database"}
{"comment_sentence_id": 2064, "class": "PlotAccessor", "comment_sentence": "detail.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "detail", "final_sentence": "detail"}
{"comment_sentence_id": 3802, "class": "ResponseError", "comment_sentence": "used as a container for an error reason supplied in a maxretryerror.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "used as a container for an error reason supplied in a maxretryerror", "final_sentence": "used as a container for an error reason supplied in a maxretryerror"}
{"comment_sentence_id": 2213, "class": "SelectNSeries", "comment_sentence": "n int", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "n int", "final_sentence": "n int"}
{"comment_sentence_id": 4220, "class": "Adadelta", "comment_sentence": "numerical stability default 1e 6", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "numerical stability default 1e 6", "final_sentence": "numerical stability default 1e 6"}
{"comment_sentence_id": 5226, "class": "FisherSnedecor", "comment_sentence": "df2 float or tensor degrees of freedom parameter 2", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "df2 float or tensor degrees of freedom parameter 2", "final_sentence": "df2 float or tensor degrees of freedom parameter 2"}
{"comment_sentence_id": 3418, "class": "Option", "comment_sentence": "this is similar to nargs", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this is similar to nargs", "final_sentence": "this is similar to nargs"}
{"comment_sentence_id": 1661, "class": "CategoricalDtype", "comment_sentence": "notes", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "notes", "final_sentence": "notes"}
{"comment_sentence_id": 3475, "class": "PacifyFlushWrapper", "comment_sentence": "sys^stdout and sys^stderr .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "sys stdout and sys stderr", "final_sentence": "sys stdout and sys stderr"}
{"comment_sentence_id": 5291, "class": "Module", "comment_sentence": "you can assign the submodules as regular attributes", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "you can assign the submodules as regular attributes", "final_sentence": "you can assign the submodules as regular attributes"}
{"comment_sentence_id": 3228, "class": "MethodDispatcher", "comment_sentence": "multiple keys so accessing any one of the items in the original", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "multiple keys so accessing any one of the items in the original", "final_sentence": "multiple keys so accessing any one of the items in the original"}
{"comment_sentence_id": 685, "class": "ParentWithDependentChildren", "comment_sentence": "model where the validation of child foreign key relationships depends", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "model where the validation of child foreign key relationships depends", "final_sentence": "model where the validation of child foreign key relationships depends"}
{"comment_sentence_id": 5687, "class": "Unfold", "comment_sentence": "of attr input into a column ie, last dimension of a 3 d attr output", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "of attr input into a column ie last dimension of a 3 d attr output", "final_sentence": "of attr input into a column ie last dimension of a 3 d attr output"}
{"comment_sentence_id": 2060, "class": "PlotAccessor", "comment_sentence": "if a series or dataframe is passed, use passed data to draw a", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if a series or dataframe is passed use passed data to draw a", "final_sentence": "if a series or dataframe is passed use passed data to draw a"}
{"comment_sentence_id": 520, "class": "MigrationGraph", "comment_sentence": "a node should be a tuple app path, migration name .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a node should be a tuple app path migration name", "final_sentence": "a node should be a tuple app path migration name"}
{"comment_sentence_id": 5261, "class": "LBFGS", "comment_sentence": "max eval int maximal number of function evaluations per optimization", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "max eval int maximal number of function evaluations per optimization", "final_sentence": "max eval int maximal number of function evaluations per optimization"}
{"comment_sentence_id": 123, "class": "BaseCommand", "comment_sentence": "a short description of the command, which will be printed in", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a short description of the command which will be printed in", "final_sentence": "a short description of the command which will be printed in"}
{"comment_sentence_id": 544, "class": "MigrationLoader", "comment_sentence": "read the python files, looking for a class called migration, which should", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "read the python files looking for a class called migration which should", "final_sentence": "read the python files looking for a class called migration which should"}
{"comment_sentence_id": 3092, "class": "Markup", "comment_sentence": "markup foo", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "markup foo", "final_sentence": "markup foo"}
{"comment_sentence_id": 4386, "class": "BatchNorm1d", "comment_sentence": "default true", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "default true", "final_sentence": "default true"}
{"comment_sentence_id": 3075, "class": "Markup", "comment_sentence": "passing an object to the constructor converts it to text and wraps", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "passing an object to the constructor converts it to text and wraps", "final_sentence": "passing an object to the constructor converts it to text and wraps"}
{"comment_sentence_id": 5347, "class": "MultiLabelMarginLoss", "comment_sentence": "reduce bool, optional deprecated see attr reduction .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "reduce bool optional deprecated see attr reduction", "final_sentence": "reduce bool optional deprecated see attr reduction"}
{"comment_sentence_id": 4301, "class": "AdaptiveMaxPool3d", "comment_sentence": "can be a tuple d, h, w or a single d for a cube d x d x d.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "can be a tuple d h w or a single d for a cube d x d x d", "final_sentence": "can be a tuple d h w or a single d for a cube d x d x d"}
{"comment_sentence_id": 5196, "class": "EnforceUnique", "comment_sentence": "raises an error if a key is seen more than once.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "raises an error if a key is seen more than once", "final_sentence": "raises an error if a key is seen more than once"}
{"comment_sentence_id": 3088, "class": "Markup", "comment_sentence": "output of that method, marking it safe.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "output of that method marking it safe", "final_sentence": "output of that method marking it safe"}
{"comment_sentence_id": 3248, "class": "NativeEnvironment", "comment_sentence": "an environment that renders templates to native python types.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "an environment that renders templates to native python types", "final_sentence": "an environment that renders templates to native python types"}
{"comment_sentence_id": 3308, "class": "omdict", "comment_sentence": "retains the order of insertions and deletions.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "retains the order of insertions and deletions", "final_sentence": "retains the order of insertions and deletions"}
{"comment_sentence_id": 3100, "class": "Markup", "comment_sentence": "markup em hello em foo", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "markup em hello em foo", "final_sentence": "markup em hello em foo"}
{"comment_sentence_id": 575, "class": "MigrationQuestioner", "comment_sentence": "this base class has a built in noninteractive mode, but the", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this base class has a built in noninteractive mode but the", "final_sentence": "this base class has a built in noninteractive mode but the"}
{"comment_sentence_id": 4254, "class": "Adam", "comment_sentence": "https openreview^net forum?id ryqu7f rz", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "https openreview net forum id ryqu7f rz", "final_sentence": "https openreview net forum id ryqu7f rz"}
{"comment_sentence_id": 1291, "class": "ConfigDict", "comment_sentence": "carrots how many carrots?", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "carrots how many carrots", "final_sentence": "carrots how many carrots"}
{"comment_sentence_id": 2426, "class": "Bucket", "comment_sentence": "to automatically reject outdated cache material.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "to automatically reject outdated cache material", "final_sentence": "to automatically reject outdated cache material"}
{"comment_sentence_id": 2087, "class": "PlotAccessor", "comment_sentence": "see matplotlib documentation online for more on this subject", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "see matplotlib documentation online for more on this subject", "final_sentence": "see matplotlib documentation online for more on this subject"}
{"comment_sentence_id": 640, "class": "MultiValueField", "comment_sentence": "compressed into a single value.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "compressed into a single value", "final_sentence": "compressed into a single value"}
{"comment_sentence_id": 5958, "class": "Response", "comment_sentence": "server s response to an http request.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "server s response to an http request", "final_sentence": "server s response to an http request"}
{"comment_sentence_id": 1704, "class": "CategoricalIndex", "comment_sentence": "categoricalindex, like categorical, can only take on a limited,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "categoricalindex like categorical can only take on a limited", "final_sentence": "categoricalindex like categorical can only take on a limited"}
{"comment_sentence_id": 3402, "class": "Option", "comment_sentence": "option name capitalized.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "option name capitalized", "final_sentence": "option name capitalized"}
{"comment_sentence_id": 638, "class": "MultiValueField", "comment_sentence": "cleaned by the first field, the second value is cleaned by the second", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "cleaned by the first field the second value is cleaned by the second", "final_sentence": "cleaned by the first field the second value is cleaned by the second"}
{"comment_sentence_id": 4394, "class": "BatchNorm1d", "comment_sentence": "output math n, c or math n, c, l same shape as input", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "output math n c or math n c l same shape as input", "final_sentence": "output math n c or math n c l same shape as input"}
{"comment_sentence_id": 14, "class": "ArchiveIndexView", "comment_sentence": "top level archive of date based items.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "top level archive of date based items", "final_sentence": "top level archive of date based items"}
{"comment_sentence_id": 5123, "class": "EmbeddingBag", "comment_sentence": "tensor 08861, 54350, 00523 ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "tensor 08861 54350 00523", "final_sentence": "tensor 08861 54350 00523"}
{"comment_sentence_id": 5492, "class": "QuantWrapper", "comment_sentence": "it observes the input tensor, after convert , quantstub", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "it observes the input tensor after convert quantstub", "final_sentence": "it observes the input tensor after convert quantstub"}
{"comment_sentence_id": 1425, "class": "ConfigureMailboxes", "comment_sentence": "if not account is specified, the mailbox is only assigned an id for use", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if not account is specified the mailbox is only assigned an id for use", "final_sentence": "if not account is specified the mailbox is only assigned an id for use"}
{"comment_sentence_id": 706, "class": "Permission", "comment_sentence": "the permissions listed above are automatically created for each model.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the permissions listed above are automatically created for each model", "final_sentence": "the permissions listed above are automatically created for each model"}
{"comment_sentence_id": 601, "class": "MultiValueDict", "comment_sentence": "d name", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "d name", "final_sentence": "d name"}
{"comment_sentence_id": 3412, "class": "Option", "comment_sentence": "param flag value which value should be used for this flag if it s", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "param flag value which value should be used for this flag if it s", "final_sentence": "param flag value which value should be used for this flag if it s"}
{"comment_sentence_id": 5688, "class": "Unfold", "comment_sentence": "tensor of shape math n, c times prod text kernel size , l , where", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "tensor of shape math n c times prod text kernel size l where", "final_sentence": "tensor of shape math n c times prod text kernel size l where"}
{"comment_sentence_id": 4392, "class": "BatchNorm1d", "comment_sentence": "shape", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "shape", "final_sentence": "shape"}
{"comment_sentence_id": 586, "class": "ModelBase", "comment_sentence": "metaclass for all models.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "metaclass for all models", "final_sentence": "metaclass for all models"}
{"comment_sentence_id": 96, "class": "BaseCommand", "comment_sentence": "as follows", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "as follows", "final_sentence": "as follows"}
{"comment_sentence_id": 3422, "class": "Option", "comment_sentence": "param allow from autoenv if this is enabled then the value of this", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "param allow from autoenv if this is enabled then the value of this", "final_sentence": "param allow from autoenv if this is enabled then the value of this"}
{"comment_sentence_id": 1050, "class": "DisplayHook", "comment_sentence": "that gets called anytime user code returns a value.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "that gets called anytime user code returns a value", "final_sentence": "that gets called anytime user code returns a value"}
{"comment_sentence_id": 141, "class": "BaseCommand", "comment_sentence": "is the list of application s configuration provided by the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "is the list of application s configuration provided by the", "final_sentence": "is the list of application s configuration provided by the"}
{"comment_sentence_id": 4302, "class": "AdaptiveMaxPool3d", "comment_sentence": "d, h and w can be either a int , or none which means the size will", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "d h and w can be either a int or none which means the size will", "final_sentence": "d h and w can be either a int or none which means the size will"}
{"comment_sentence_id": 52, "class": "AtomicTests", "comment_sentence": "robust way to ask the database for its current transaction state.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "robust way to ask the database for its current transaction state", "final_sentence": "robust way to ask the database for its current transaction state"}
{"comment_sentence_id": 3473, "class": "PacifyFlushWrapper", "comment_sentence": "of the python interpreter.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "of the python interpreter", "final_sentence": "of the python interpreter"}
{"comment_sentence_id": 122, "class": "BaseCommand", "comment_sentence": "help", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "help", "final_sentence": "help"}
{"comment_sentence_id": 1594, "class": "BooleanArray", "comment_sentence": "copy bool, default false", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "copy bool default false", "final_sentence": "copy bool default false"}
{"comment_sentence_id": 689, "class": "Permission", "comment_sentence": "the permissions system provides a way to assign permissions to specific", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the permissions system provides a way to assign permissions to specific", "final_sentence": "the permissions system provides a way to assign permissions to specific"}
{"comment_sentence_id": 4274, "class": "Adamax", "comment_sentence": "it has been proposed in adam a method for stochastic optimization .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "it has been proposed in adam a method for stochastic optimization", "final_sentence": "it has been proposed in adam a method for stochastic optimization"}
{"comment_sentence_id": 4213, "class": "Adadelta", "comment_sentence": "it has been proposed in adadelta an adaptive learning rate method .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "it has been proposed in adadelta an adaptive learning rate method", "final_sentence": "it has been proposed in adadelta an adaptive learning rate method"}
{"comment_sentence_id": 519, "class": "MigrationGraph", "comment_sentence": "replaced migrations to point to the replacing one.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "replaced migrations to point to the replacing one", "final_sentence": "replaced migrations to point to the replacing one"}
{"comment_sentence_id": 3090, "class": "Markup", "comment_sentence": "def html self", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "def html self", "final_sentence": "def html self"}
{"comment_sentence_id": 4366, "class": "BatchNorm1d", "comment_sentence": "classes and the conventional notion of momentum.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "classes and the conventional notion of momentum", "final_sentence": "classes and the conventional notion of momentum"}
{"comment_sentence_id": 2568, "class": "Environment", "comment_sentence": "it contains", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "it contains", "final_sentence": "it contains"}
{"comment_sentence_id": 132, "class": "BaseCommand", "comment_sentence": "a boolean if true , the command prints a warning if the set of", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a boolean if true the command prints a warning if the set of", "final_sentence": "a boolean if true the command prints a warning if the set of"}
{"comment_sentence_id": 5694, "class": "Unfold", "comment_sentence": "l prod d left lfloor frac text spatial size d 2 times text padding d %", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "l prod d left lfloor frac text spatial size d 2 times text padding d", "final_sentence": "l prod d left lfloor frac text spatial size d 2 times text padding d"}
{"comment_sentence_id": 663, "class": "MyModel", "comment_sentence": "model subclass with a custom base using metaclass.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "model subclass with a custom base using metaclass", "final_sentence": "model subclass with a custom base using metaclass"}
{"comment_sentence_id": 2576, "class": "Environment", "comment_sentence": "block start string", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "block start string", "final_sentence": "block start string"}
{"comment_sentence_id": 68, "class": "AutoFieldMeta", "comment_sentence": "a new flag needs", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "a new flag needs", "final_sentence": "a new flag needs"}
{"comment_sentence_id": 5256, "class": "LBFGS", "comment_sentence": "try reducing the history size, or use a different algorithm.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "try reducing the history size or use a different algorithm", "final_sentence": "try reducing the history size or use a different algorithm"}
{"comment_sentence_id": 4460, "class": "BCEWithLogitsLoss", "comment_sentence": "this loss combines a sigmoid layer and the bceloss in one single", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this loss combines a sigmoid layer and the bceloss in one single", "final_sentence": "this loss combines a sigmoid layer and the bceloss in one single"}
{"comment_sentence_id": 3259, "class": "NotAny", "comment_sentence": "not skip over leading whitespace.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "not skip over leading whitespace", "final_sentence": "not skip over leading whitespace"}
{"comment_sentence_id": 5490, "class": "QuantWrapper", "comment_sentence": "this is used by the quantization utility functions to add the quant and", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this is used by the quantization utility functions to add the quant and", "final_sentence": "this is used by the quantization utility functions to add the quant and"}
{"comment_sentence_id": 656, "class": "MultiWidget", "comment_sentence": "adds a list of subwidgets to the context as widget subwidgets .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "adds a list of subwidgets to the context as widget subwidgets", "final_sentence": "adds a list of subwidgets to the context as widget subwidgets"}
{"comment_sentence_id": 29, "class": "Atomic", "comment_sentence": "this allows reentrancy even if the same atomicwrapper is reused.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this allows reentrancy even if the same atomicwrapper is reused", "final_sentence": "this allows reentrancy even if the same atomicwrapper is reused"}
{"comment_sentence_id": 1716, "class": "CategoricalIndex", "comment_sentence": "the categories for the categorical.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the categories for the categorical", "final_sentence": "the categories for the categorical"}
{"comment_sentence_id": 1322, "class": "ConfigDict", "comment_sentence": "pot tags ^append z invalid", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot tags append z invalid", "final_sentence": "pot tags append z invalid"}
{"comment_sentence_id": 1085, "class": "InteractiveShellApp", "comment_sentence": "meth init code", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "meth init code", "final_sentence": "meth init code"}
{"comment_sentence_id": 94, "class": "BaseCommand", "comment_sentence": "if you are interested in overriding customizing various aspects of", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "if you are interested in overriding customizing various aspects of", "final_sentence": "if you are interested in overriding customizing various aspects of"}
{"comment_sentence_id": 5354, "class": "MultiLabelMarginLoss", "comment_sentence": "reduction string, optional specifies the reduction to apply to the output", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "reduction string optional specifies the reduction to apply to the output", "final_sentence": "reduction string optional specifies the reduction to apply to the output"}
{"comment_sentence_id": 1558, "class": "AccessorDocumenter", "comment_sentence": "specialized documenter subclass for accessors.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "specialized documenter subclass for accessors", "final_sentence": "specialized documenter subclass for accessors"}
{"comment_sentence_id": 5220, "class": "FisherSnedecor", "comment_sentence": "example", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "example", "final_sentence": "example"}
{"comment_sentence_id": 4219, "class": "Adadelta", "comment_sentence": "eps float, optional term added to the denominator to improve", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "eps float optional term added to the denominator to improve", "final_sentence": "eps float optional term added to the denominator to improve"}
{"comment_sentence_id": 2085, "class": "PlotAccessor", "comment_sentence": "will be the object returned by the backend.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "will be the object returned by the backend", "final_sentence": "will be the object returned by the backend"}
{"comment_sentence_id": 92, "class": "BaseCommand", "comment_sentence": "response if you don t need to change any of that behavior,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "response if you don t need to change any of that behavior", "final_sentence": "response if you don t need to change any of that behavior"}
{"comment_sentence_id": 582, "class": "MigrationWriter", "comment_sentence": "take a migration instance and is able to produce the contents", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "take a migration instance and is able to produce the contents", "final_sentence": "take a migration instance and is able to produce the contents"}
{"comment_sentence_id": 3266, "class": "NotAny", "comment_sentence": "ident and or not word alphas", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "ident and or not word alphas", "final_sentence": "ident and or not word alphas"}
{"comment_sentence_id": 1048, "class": "DisplayHook", "comment_sentence": "the custom ipython displayhook to replace sys^displayhook.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the custom ipython displayhook to replace sys displayhook", "final_sentence": "the custom ipython displayhook to replace sys displayhook"}
{"comment_sentence_id": 5289, "class": "Module", "comment_sentence": "modules can also contain other modules, allowing to nest them in", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "modules can also contain other modules allowing to nest them in", "final_sentence": "modules can also contain other modules allowing to nest them in"}
{"comment_sentence_id": 5658, "class": "TransformerEncoderLayer", "comment_sentence": "examples", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 4248, "class": "Adam", "comment_sentence": "amsgrad boolean, optional whether to use the amsgrad variant of this", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "amsgrad boolean optional whether to use the amsgrad variant of this", "final_sentence": "amsgrad boolean optional whether to use the amsgrad variant of this"}
{"comment_sentence_id": 4685, "class": "ConstantPad3d", "comment_sentence": "examples", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 5303, "class": "Module", "comment_sentence": "submodules assigned in this way will be registered, and will have their", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "submodules assigned in this way will be registered and will have their", "final_sentence": "submodules assigned in this way will be registered and will have their"}
{"comment_sentence_id": 5352, "class": "MultiLabelMarginLoss", "comment_sentence": "batch element instead and ignores attr size average .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "batch element instead and ignores attr size average", "final_sentence": "batch element instead and ignores attr size average"}
{"comment_sentence_id": 1714, "class": "CategoricalIndex", "comment_sentence": "categories will be replaced with nan.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "categories will be replaced with nan", "final_sentence": "categories will be replaced with nan"}
{"comment_sentence_id": 84, "class": "BadSignature", "comment_sentence": "signature does not match.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "signature does not match", "final_sentence": "signature does not match"}
{"comment_sentence_id": 5686, "class": "Unfold", "comment_sentence": "each sliding attr kernel size sized block within the spatial dimensions", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "each sliding attr kernel size sized block within the spatial dimensions", "final_sentence": "each sliding attr kernel size sized block within the spatial dimensions"}
{"comment_sentence_id": 1140, "class": "RichPromptDisplayHook", "comment_sentence": "subclass of base display hook using coloured prompt", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "subclass of base display hook using coloured prompt", "final_sentence": "subclass of base display hook using coloured prompt"}
{"comment_sentence_id": 4164, "class": "_OpNamespace", "comment_sentence": "then calls this new operation", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "then calls this new operation", "final_sentence": "then calls this new operation"}
{"comment_sentence_id": 5939, "class": "PreparedRequest", "comment_sentence": "r req^prepare", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "r req prepare", "final_sentence": "r req prepare"}
{"comment_sentence_id": 4252, "class": "Adam", "comment_sentence": "https arxiv^org abs 14126980", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "https arxiv org abs 14126980", "final_sentence": "https arxiv org abs 14126980"}
{"comment_sentence_id": 5212, "class": "ExternalInitializer", "comment_sentence": "the initializer, but rather provided in the workspace when param init net is", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "the initializer but rather provided in the workspace when param init net is", "final_sentence": "the initializer but rather provided in the workspace when param init net is"}
{"comment_sentence_id": 1434, "class": "ConnectToGuiOMatic", "comment_sentence": "connect to a waiting gui o matic gui", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "connect to a waiting gui o matic gui", "final_sentence": "connect to a waiting gui o matic gui"}
{"comment_sentence_id": 1644, "class": "CategoricalDtype", "comment_sentence": "type for categorical data with the categories and orderedness.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "type for categorical data with the categories and orderedness", "final_sentence": "type for categorical data with the categories and orderedness"}
{"comment_sentence_id": 4303, "class": "AdaptiveMaxPool3d", "comment_sentence": "be the same as that of the input.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "be the same as that of the input", "final_sentence": "be the same as that of the input"}
{"comment_sentence_id": 5224, "class": "FisherSnedecor", "comment_sentence": "args", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "args", "final_sentence": "args"}
{"comment_sentence_id": 1663, "class": "CategoricalDtype", "comment_sentence": "independent of the values.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "independent of the values", "final_sentence": "independent of the values"}
{"comment_sentence_id": 1134, "class": "MyFrame", "comment_sentence": "and has a simple menu.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "and has a simple menu", "final_sentence": "and has a simple menu"}
{"comment_sentence_id": 3078, "class": "Markup", "comment_sentence": "meth escape class method instead.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "meth escape class method instead", "final_sentence": "meth escape class method instead"}
{"comment_sentence_id": 1324, "class": "ConfigDict", "comment_sentence": "valueerror invalid value for config tags 1 .", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "valueerror invalid value for config tags 1", "final_sentence": "valueerror invalid value for config tags 1"}
{"comment_sentence_id": 3098, "class": "Markup", "comment_sentence": "markup em %s em % foo & bar", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "markup em s em foo bar", "final_sentence": "markup em s em foo bar"}
{"comment_sentence_id": 3391, "class": "Option", "comment_sentence": "if this", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if this", "final_sentence": "if this"}
{"comment_sentence_id": 5769, "class": "Unfold", "comment_sentence": "# convolution is equivalent with unfold matrix multiplication fold or view to output shape", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "convolution is equivalent with unfold matrix multiplication fold or view to output shape", "final_sentence": "convolution is equivalent with unfold matrix multiplication fold or view to output shape"}
{"comment_sentence_id": 1550, "class": "AbstractHolidayCalendar", "comment_sentence": "abstract interface to create holidays following certain rules.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "abstract interface to create holidays following certain rules", "final_sentence": "abstract interface to create holidays following certain rules"}
{"comment_sentence_id": 1710, "class": "CategoricalIndex", "comment_sentence": "parameters", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "parameters", "final_sentence": "parameters"}
{"comment_sentence_id": 2081, "class": "PlotAccessor", "comment_sentence": "options to pass to matplotlib plotting method.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "options to pass to matplotlib plotting method", "final_sentence": "options to pass to matplotlib plotting method"}
{"comment_sentence_id": 5262, "class": "LBFGS", "comment_sentence": "step default max iter 125 .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "step default max iter 125", "final_sentence": "step default max iter 125"}
{"comment_sentence_id": 4278, "class": "Adamax", "comment_sentence": "lr float, optional learning rate default 2e 3", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "lr float optional learning rate default 2e 3", "final_sentence": "lr float optional learning rate default 2e 3"}
{"comment_sentence_id": 3472, "class": "PacifyFlushWrapper", "comment_sentence": "from ^flush being called on broken pipe during the shutdown final gc", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "from flush being called on broken pipe during the shutdown final gc", "final_sentence": "from flush being called on broken pipe during the shutdown final gc"}
{"comment_sentence_id": 3094, "class": "Markup", "comment_sentence": "this is a subclass of the text type str in python 3,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this is a subclass of the text type str in python 3", "final_sentence": "this is a subclass of the text type str in python 3"}
{"comment_sentence_id": 5491, "class": "QuantWrapper", "comment_sentence": "dequant modules, before convert function quantstub will just be observer,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "dequant modules before convert function quantstub will just be observer", "final_sentence": "dequant modules before convert function quantstub will just be observer"}
{"comment_sentence_id": 1309, "class": "ConfigDict", "comment_sentence": "pot^walk liquids^vodka", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot walk liquids vodka", "final_sentence": "pot walk liquids vodka"}
{"comment_sentence_id": 3257, "class": "NotAny", "comment_sentence": "does not match at the current position.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "does not match at the current position", "final_sentence": "does not match at the current position"}
{"comment_sentence_id": 4165, "class": "_OpNamespace", "comment_sentence": "and subsequent accesses will incur no further lookup the namespace and", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "and subsequent accesses will incur no further lookup the namespace and", "final_sentence": "and subsequent accesses will incur no further lookup the namespace and"}
{"comment_sentence_id": 3192, "class": "MemcachedBytecodeCache", "comment_sentence": "the cache system.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "the cache system", "final_sentence": "the cache system"}
{"comment_sentence_id": 1655, "class": "CategoricalDtype", "comment_sentence": "categories", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "categories", "final_sentence": "categories"}
{"comment_sentence_id": 3190, "class": "MemcachedBytecodeCache", "comment_sentence": "the other arguments to the constructor are the prefix for all keys that", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "the other arguments to the constructor are the prefix for all keys that", "final_sentence": "the other arguments to the constructor are the prefix for all keys that"}
{"comment_sentence_id": 5364, "class": "MultiLabelMarginLoss", "comment_sentence": "input math c or math n, c where n is the batch size and c", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "input math c or math n c where n is the batch size and c", "final_sentence": "input math c or math n c where n is the batch size and c"}
{"comment_sentence_id": 2408, "class": "Argument", "comment_sentence": "arguments are positional parameters to a command.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "arguments are positional parameters to a command", "final_sentence": "arguments are positional parameters to a command"}
{"comment_sentence_id": 5263, "class": "LBFGS", "comment_sentence": "tolerance grad float termination tolerance on first order optimality", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "tolerance grad float termination tolerance on first order optimality", "final_sentence": "tolerance grad float termination tolerance on first order optimality"}
{"comment_sentence_id": 2084, "class": "PlotAccessor", "comment_sentence": "if the backend is not the default matplotlib one, the return value", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if the backend is not the default matplotlib one the return value", "final_sentence": "if the backend is not the default matplotlib one the return value"}
{"comment_sentence_id": 3325, "class": "omdict", "comment_sentence": "optional parameters have been added to some dict methods, but because the", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "optional parameters have been added to some dict methods but because the", "final_sentence": "optional parameters have been added to some dict methods but because the"}
{"comment_sentence_id": 5451, "class": "OneHotCategorical", "comment_sentence": "logits tensor event log probabilities", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "logits tensor event log probabilities", "final_sentence": "logits tensor event log probabilities"}
{"comment_sentence_id": 4246, "class": "Adam", "comment_sentence": "numerical stability default 1e 8", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "numerical stability default 1e 8", "final_sentence": "numerical stability default 1e 8"}
{"comment_sentence_id": 5267, "class": "LBFGS", "comment_sentence": "history size int update history size default 100 .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "history size int update history size default 100", "final_sentence": "history size int update history size default 100"}
{"comment_sentence_id": 1967, "class": "IntervalDtype", "comment_sentence": "examples", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 3493, "class": "ParseError", "comment_sentence": "in the toml being parsed.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "in the toml being parsed", "final_sentence": "in the toml being parsed"}
{"comment_sentence_id": 1330, "class": "ConfigDict", "comment_sentence": "invalidkeyerror invalid key for config liquids evil", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "invalidkeyerror invalid key for config liquids evil", "final_sentence": "invalidkeyerror invalid key for config liquids evil"}
{"comment_sentence_id": 548, "class": "MigrationLoader", "comment_sentence": "some migrations will be marked as replacing another set of migrations.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "some migrations will be marked as replacing another set of migrations", "final_sentence": "some migrations will be marked as replacing another set of migrations"}
{"comment_sentence_id": 1097, "class": "LazyEvaluate", "comment_sentence": "this is used for formatting strings with values that need to be updated", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this is used for formatting strings with values that need to be updated", "final_sentence": "this is used for formatting strings with values that need to be updated"}
{"comment_sentence_id": 5698, "class": "Unfold", "comment_sentence": "dimensions.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "dimensions", "final_sentence": "dimensions"}
{"comment_sentence_id": 2327, "class": "StringMethods", "comment_sentence": "examples", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 1297, "class": "ConfigDict", "comment_sentence": "tags tags , c c , int, 0 ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "tags tags c c int 0", "final_sentence": "tags tags c c int 0"}
{"comment_sentence_id": 1110, "class": "Magics", "comment_sentence": "classes providing magic functions need to subclass this class, and they", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "classes providing magic functions need to subclass this class and they", "final_sentence": "classes providing magic functions need to subclass this class and they"}
{"comment_sentence_id": 3751, "class": "Request", "comment_sentence": "req^prepare", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "req prepare", "final_sentence": "req prepare"}
{"comment_sentence_id": 1083, "class": "InteractiveShellApp", "comment_sentence": "meth init gui pylab", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "meth init gui pylab", "final_sentence": "meth init gui pylab"}
{"comment_sentence_id": 2071, "class": "PlotAccessor", "comment_sentence": "if true, boolean values can be plotted.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if true boolean values can be plotted", "final_sentence": "if true boolean values can be plotted"}
{"comment_sentence_id": 4368, "class": "BatchNorm1d", "comment_sentence": "update rule for running statistics here is", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "update rule for running statistics here is", "final_sentence": "update rule for running statistics here is"}
{"comment_sentence_id": 3298, "class": "NotMyLock", "comment_sentence": "pass", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pass", "final_sentence": "pass"}
{"comment_sentence_id": 3255, "class": "NotAny", "comment_sentence": "notany does not advance the parsing position within the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "notany does not advance the parsing position within the", "final_sentence": "notany does not advance the parsing position within the"}
{"comment_sentence_id": 3191, "class": "MemcachedBytecodeCache", "comment_sentence": "is added before the actual cache key and the timeout for the bytecode in", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "is added before the actual cache key and the timeout for the bytecode in", "final_sentence": "is added before the actual cache key and the timeout for the bytecode in"}
{"comment_sentence_id": 1657, "class": "CategoricalDtype", "comment_sentence": "methods", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "methods", "final_sentence": "methods"}
{"comment_sentence_id": 5442, "class": "OneHotCategorical", "comment_sentence": "and it will be normalized to sum to 1.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "and it will be normalized to sum to 1", "final_sentence": "and it will be normalized to sum to 1"}
{"comment_sentence_id": 1305, "class": "ConfigDict", "comment_sentence": "pot liquids vodka", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot liquids vodka", "final_sentence": "pot liquids vodka"}
{"comment_sentence_id": 2418, "class": "BaseCommand_", "comment_sentence": "a cli command.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a cli command", "final_sentence": "a cli command"}
{"comment_sentence_id": 3385, "class": "Option", "comment_sentence": "options are usually optional values on the command line and", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "options are usually optional values on the command line and", "final_sentence": "options are usually optional values on the command line and"}
{"comment_sentence_id": 3321, "class": "omdict", "comment_sentence": "get , setdefault , pop , popitem ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "get setdefault pop popitem", "final_sentence": "get setdefault pop popitem"}
{"comment_sentence_id": 27, "class": "Atomic", "comment_sentence": "connection.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "connection", "final_sentence": "connection"}
{"comment_sentence_id": 3306, "class": "omdict", "comment_sentence": "key.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "key", "final_sentence": "key"}
{"comment_sentence_id": 4214, "class": "Adadelta", "comment_sentence": "arguments", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "arguments", "final_sentence": "arguments"}
{"comment_sentence_id": 2550, "class": "Date", "comment_sentence": "a date literal.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a date literal", "final_sentence": "a date literal"}
{"comment_sentence_id": 4639, "class": "BuildType", "comment_sentence": "the build type will be given in attr cmake build type env .", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "the build type will be given in attr cmake build type env", "final_sentence": "the build type will be given in attr cmake build type env"}
{"comment_sentence_id": 1106, "class": "Magics", "comment_sentence": "this can make some functions easier to type, eg%cd .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this can make some functions easier to type eg cd", "final_sentence": "this can make some functions easier to type eg cd"}
{"comment_sentence_id": 3490, "class": "PackageIndex", "comment_sentence": "represents a package index and provides easier access to endpoints", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "represents a package index and provides easier access to endpoints", "final_sentence": "represents a package index and provides easier access to endpoints"}
{"comment_sentence_id": 1712, "class": "CategoricalIndex", "comment_sentence": "the values of the categorical.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the values of the categorical", "final_sentence": "the values of the categorical"}
{"comment_sentence_id": 1064, "class": "HelpEnd", "comment_sentence": "transformer for help syntax obj?", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "transformer for help syntax obj", "final_sentence": "transformer for help syntax obj"}
{"comment_sentence_id": 1585, "class": "BooleanArray", "comment_sentence": "booleanarray is considered experimental.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "booleanarray is considered experimental", "final_sentence": "booleanarray is considered experimental"}
{"comment_sentence_id": 5360, "class": "MultiLabelMarginLoss", "comment_sentence": "and attr reduce are in the process of being deprecated, and in the meantime,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "and attr reduce are in the process of being deprecated and in the meantime", "final_sentence": "and attr reduce are in the process of being deprecated and in the meantime"}
{"comment_sentence_id": 1708, "class": "CategoricalIndex", "comment_sentence": "additions, divisions, .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "additions divisions", "final_sentence": "additions divisions"}
{"comment_sentence_id": 4296, "class": "AdaptiveMaxPool3d", "comment_sentence": "applies a 3d adaptive max pooling over an input signal composed of several input planes.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "applies a 3d adaptive max pooling over an input signal composed of several input planes", "final_sentence": "applies a 3d adaptive max pooling over an input signal composed of several input planes"}
{"comment_sentence_id": 680, "class": "OverwritingStorage", "comment_sentence": "overwrite existing files instead of appending a suffix to generate an", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "overwrite existing files instead of appending a suffix to generate an", "final_sentence": "overwrite existing files instead of appending a suffix to generate an"}
{"comment_sentence_id": 54, "class": "AtomicTests", "comment_sentence": "implementation , there are only a few basic tests with the decorator", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "implementation there are only a few basic tests with the decorator", "final_sentence": "implementation there are only a few basic tests with the decorator"}
{"comment_sentence_id": 2446, "class": "CaseInsensitiveDict", "comment_sentence": "the structure remembers the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the structure remembers the", "final_sentence": "the structure remembers the"}
{"comment_sentence_id": 5268, "class": "LBFGS", "comment_sentence": "line search fn str either strong wolfe or none default none .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "line search fn str either strong wolfe or none default none", "final_sentence": "line search fn str either strong wolfe or none default none"}
{"comment_sentence_id": 1068, "class": "HistoryAccessor", "comment_sentence": "access the history database without adding to it.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "access the history database without adding to it", "final_sentence": "access the history database without adding to it"}
{"comment_sentence_id": 2503, "class": "Context_", "comment_sentence": "the context is immutable.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the context is immutable", "final_sentence": "the context is immutable"}
{"comment_sentence_id": 5427, "class": "NetModifier", "comment_sentence": "inherited classes should implement the modify net method where", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "inherited classes should implement the modify net method where", "final_sentence": "inherited classes should implement the modify net method where"}
{"comment_sentence_id": 556, "class": "MigrationLoader", "comment_sentence": "we re already not just operating", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "we re already not just operating", "final_sentence": "we re already not just operating"}
{"comment_sentence_id": 1604, "class": "BooleanArray", "comment_sentence": "pd^array true, false, none , dtype boolean", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pd array true false none dtype boolean", "final_sentence": "pd array true false none dtype boolean"}
{"comment_sentence_id": 1640, "class": "BusinessMixin", "comment_sentence": "mixin to business types to provide related functions.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "mixin to business types to provide related functions", "final_sentence": "mixin to business types to provide related functions"}
{"comment_sentence_id": 1101, "class": "Magics", "comment_sentence": "base class for implementing magic functions.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "base class for implementing magic functions", "final_sentence": "base class for implementing magic functions"}
{"comment_sentence_id": 4149, "class": "_OpNamespace", "comment_sentence": "at startup, this operation will not yet be bound into python.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "at startup this operation will not yet be bound into python", "final_sentence": "at startup this operation will not yet be bound into python"}
{"comment_sentence_id": 5345, "class": "MultiLabelMarginLoss", "comment_sentence": "when reduce is false .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "when reduce is false", "final_sentence": "when reduce is false"}
{"comment_sentence_id": 2066, "class": "PlotAccessor", "comment_sentence": "equivalent to yerr.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "equivalent to yerr", "final_sentence": "equivalent to yerr"}
{"comment_sentence_id": 3603, "class": "Path", "comment_sentence": "first of all, instead of returning an open file", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "first of all instead of returning an open file", "final_sentence": "first of all instead of returning an open file"}
{"comment_sentence_id": 4462, "class": "BCEWithLogitsLoss", "comment_sentence": "this version is more numerically stable than using a plain sigmoid", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this version is more numerically stable than using a plain sigmoid", "final_sentence": "this version is more numerically stable than using a plain sigmoid"}
{"comment_sentence_id": 5763, "class": "Unfold", "comment_sentence": "input torch^randn 2, 5, 3, 4", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "input torch randn 2 5 3 4", "final_sentence": "input torch randn 2 5 3 4"}
{"comment_sentence_id": 3811, "class": "Retry", "comment_sentence": "http poolmanager retries retries", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "http poolmanager retries retries", "final_sentence": "http poolmanager retries retries"}
{"comment_sentence_id": 2422, "class": "Bucket", "comment_sentence": "buckets are used to store the bytecode for one template.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "buckets are used to store the bytecode for one template", "final_sentence": "buckets are used to store the bytecode for one template"}
{"comment_sentence_id": 5440, "class": "OneHotCategorical", "comment_sentence": "samples are one hot coded vectors of size probs^size 1 .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "samples are one hot coded vectors of size probs size 1", "final_sentence": "samples are one hot coded vectors of size probs size 1"}
{"comment_sentence_id": 3297, "class": "NotMyLock", "comment_sentence": "except unlockerror", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "except unlockerror", "final_sentence": "except unlockerror"}
{"comment_sentence_id": 2074, "class": "PlotAccessor", "comment_sentence": "plotting^backend .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "plotting backend", "final_sentence": "plotting backend"}
{"comment_sentence_id": 25, "class": "Atomic", "comment_sentence": "ensure that some code runs within a transaction without creating overhead.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "ensure that some code runs within a transaction without creating overhead", "final_sentence": "ensure that some code runs within a transaction without creating overhead"}
{"comment_sentence_id": 3177, "class": "MemcachedBytecodeCache", "comment_sentence": "class minimalclientinterface", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "class minimalclientinterface", "final_sentence": "class minimalclientinterface"}
{"comment_sentence_id": 4133, "class": "UnlockError", "comment_sentence": "try", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "try", "final_sentence": "try"}
{"comment_sentence_id": 19, "class": "Atomic", "comment_sentence": "decorated function in the instance itself, used as a context manager.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "decorated function in the instance itself used as a context manager", "final_sentence": "decorated function in the instance itself used as a context manager"}
{"comment_sentence_id": 3164, "class": "MemcachedBytecodeCache", "comment_sentence": "tummy s memcache or cmemcache but will accept any class that provides", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "tummy s memcache or cmemcache but will accept any class that provides", "final_sentence": "tummy s memcache or cmemcache but will accept any class that provides"}
{"comment_sentence_id": 2077, "class": "PlotAccessor", "comment_sentence": "specify the plotting^backend for the whole session, set", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "specify the plotting backend for the whole session set", "final_sentence": "specify the plotting backend for the whole session set"}
{"comment_sentence_id": 2075, "class": "PlotAccessor", "comment_sentence": "for instance, matplotlib .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "for instance matplotlib", "final_sentence": "for instance matplotlib"}
{"comment_sentence_id": 4382, "class": "BatchNorm1d", "comment_sentence": "ie simple average .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "ie simple average", "final_sentence": "ie simple average"}
{"comment_sentence_id": 552, "class": "MigrationLoader", "comment_sentence": "any dependency pointers to the replaced migrations are re pointed to the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "any dependency pointers to the replaced migrations are re pointed to the", "final_sentence": "any dependency pointers to the replaced migrations are re pointed to the"}
{"comment_sentence_id": 550, "class": "MigrationLoader", "comment_sentence": "if all the migrations they replace are either unapplied or missing from", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if all the migrations they replace are either unapplied or missing from", "final_sentence": "if all the migrations they replace are either unapplied or missing from"}
{"comment_sentence_id": 967, "class": "Audio", "comment_sentence": "audio http www^nch.com^au acm 8k16bitpcm^wav # from url", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "audio http www nch com au acm 8k16bitpcm wav from url", "final_sentence": "audio http www nch com au acm 8k16bitpcm wav from url"}
{"comment_sentence_id": 4110, "class": "TokenStreamIterator", "comment_sentence": "the iterator for tokenstreams.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the iterator for tokenstreams", "final_sentence": "the iterator for tokenstreams"}
{"comment_sentence_id": 5339, "class": "MultiLabelMarginLoss", "comment_sentence": "the losses are averaged over each loss element in the batch.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the losses are averaged over each loss element in the batch", "final_sentence": "the losses are averaged over each loss element in the batch"}
{"comment_sentence_id": 338, "class": "ErrorDict", "comment_sentence": "the dictionary keys are the field names, and the values are the errors.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "the dictionary keys are the field names and the values are the errors", "final_sentence": "the dictionary keys are the field names and the values are the errors"}
{"comment_sentence_id": 639, "class": "MultiValueField", "comment_sentence": "field, etc once all fields are cleaned, the list of clean values is", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "field etc once all fields are cleaned the list of clean values is", "final_sentence": "field etc once all fields are cleaned the list of clean values is"}
{"comment_sentence_id": 3295, "class": "NotMyLock", "comment_sentence": "try", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "try", "final_sentence": "try"}
{"comment_sentence_id": 1596, "class": "BooleanArray", "comment_sentence": "attributes", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "attributes", "final_sentence": "attributes"}
{"comment_sentence_id": 5690, "class": "Unfold", "comment_sentence": "within each block a block has math prod text kernel size spatial", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "within each block a block has math prod text kernel size spatial", "final_sentence": "within each block a block has math prod text kernel size spatial"}
{"comment_sentence_id": 2435, "class": "CallBlock", "comment_sentence": "call is called with", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "call is called with", "final_sentence": "call is called with"}
{"comment_sentence_id": 5660, "class": "TransformerEncoderLayer", "comment_sentence": "src torch^rand 10, 32, 512", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "src torch rand 10 32 512", "final_sentence": "src torch rand 10 32 512"}
{"comment_sentence_id": 3314, "class": "omdict", "comment_sentence": "linked list node references, one for each value associated with that key.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "linked list node references one for each value associated with that key", "final_sentence": "linked list node references one for each value associated with that key"}
{"comment_sentence_id": 5333, "class": "MultiLabelMarginLoss", "comment_sentence": "the criterion only considers a contiguous block of non negative targets that", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the criterion only considers a contiguous block of non negative targets that", "final_sentence": "the criterion only considers a contiguous block of non negative targets that"}
{"comment_sentence_id": 3310, "class": "omdict", "comment_sentence": "items.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "items", "final_sentence": "items"}
{"comment_sentence_id": 4126, "class": "Trie", "comment_sentence": "abstract base class for tries", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "abstract base class for tries", "final_sentence": "abstract base class for tries"}
{"comment_sentence_id": 3086, "class": "Markup", "comment_sentence": "use.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "use", "final_sentence": "use"}
{"comment_sentence_id": 5695, "class": "Unfold", "comment_sentence": "text dilation d times text kernel size d 1 1 text stride d 1 right rfloor,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "text dilation d times text kernel size d 1 1 text stride d 1 right rfloor", "final_sentence": "text dilation d times text kernel size d 1 1 text stride d 1 right rfloor"}
{"comment_sentence_id": 5335, "class": "MultiLabelMarginLoss", "comment_sentence": "this allows for different samples to have variable amounts of target classes.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this allows for different samples to have variable amounts of target classes", "final_sentence": "this allows for different samples to have variable amounts of target classes"}
{"comment_sentence_id": 4388, "class": "BatchNorm1d", "comment_sentence": "module tracks the running mean and variance, and when set to false ,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "module tracks the running mean and variance and when set to false", "final_sentence": "module tracks the running mean and variance and when set to false"}
{"comment_sentence_id": 5691, "class": "Unfold", "comment_sentence": "locations each containing a math c channeled vector , and math l is", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "locations each containing a math c channeled vector and math l is", "final_sentence": "locations each containing a math c channeled vector and math l is"}
{"comment_sentence_id": 515, "class": "MigrationGraph", "comment_sentence": "for these instead, the code to load them in here should examine the", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "for these instead the code to load them in here should examine the", "final_sentence": "for these instead the code to load them in here should examine the"}
{"comment_sentence_id": 5211, "class": "ExternalInitializer", "comment_sentence": "this class is used in cases when the parameter should not be initialized by", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this class is used in cases when the parameter should not be initialized by", "final_sentence": "this class is used in cases when the parameter should not be initialized by"}
{"comment_sentence_id": 5773, "class": "Unfold", "comment_sentence": "out unf inp unf^transpose 1, 2 ^matmul w^view w^size 0 , 1 ^t ^transpose 1, 2", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "out unf inp unf transpose 1 2 matmul w view w size 0 1 t transpose 1 2", "final_sentence": "out unf inp unf transpose 1 2 matmul w view w size 0 1 t transpose 1 2"}
{"comment_sentence_id": 4362, "class": "BatchNorm1d", "comment_sentence": "keep running estimates, and batch statistics are instead used during", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "keep running estimates and batch statistics are instead used during", "final_sentence": "keep running estimates and batch statistics are instead used during"}
{"comment_sentence_id": 1450, "class": "Forward", "comment_sentence": "create forwarding drafts of one or more messages", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "create forwarding drafts of one or more messages", "final_sentence": "create forwarding drafts of one or more messages"}
{"comment_sentence_id": 3400, "class": "Option", "comment_sentence": "prompted for input.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "prompted for input", "final_sentence": "prompted for input"}
{"comment_sentence_id": 3500, "class": "ParseFatalException", "comment_sentence": "is found stops all parsing immediately", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "is found stops all parsing immediately", "final_sentence": "is found stops all parsing immediately"}
{"comment_sentence_id": 5775, "class": "Unfold", "comment_sentence": "# or equivalently and avoiding a copy ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "or equivalently and avoiding a copy", "final_sentence": "or equivalently and avoiding a copy"}
{"comment_sentence_id": 1108, "class": "Magics", "comment_sentence": "vs. %cd .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "vs cd", "final_sentence": "vs cd"}
{"comment_sentence_id": 3424, "class": "Option", "comment_sentence": "variable in case a prefix is defined on the", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "variable in case a prefix is defined on the", "final_sentence": "variable in case a prefix is defined on the"}
{"comment_sentence_id": 5693, "class": "Unfold", "comment_sentence": "math", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "math", "final_sentence": "math"}
{"comment_sentence_id": 636, "class": "MultiValueField", "comment_sentence": "each value in", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "each value in", "final_sentence": "each value in"}
{"comment_sentence_id": 3318, "class": "omdict", "comment_sentence": "object can be replaced with an omdict object and all interaction will", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "object can be replaced with an omdict object and all interaction will", "final_sentence": "object can be replaced with an omdict object and all interaction will"}
{"comment_sentence_id": 1601, "class": "BooleanArray", "comment_sentence": "booleanarray", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "booleanarray", "final_sentence": "booleanarray"}
{"comment_sentence_id": 136, "class": "BaseCommand", "comment_sentence": "prior to executing the command.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "prior to executing the command", "final_sentence": "prior to executing the command"}
{"comment_sentence_id": 969, "class": "Audio", "comment_sentence": "audio path to sound^wav # from file", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "audio path to sound wav from file", "final_sentence": "audio path to sound wav from file"}
{"comment_sentence_id": 4641, "class": "BuildType", "comment_sentence": "is none , then the build type will be inferred from cmakecache^txt .", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "is none then the build type will be inferred from cmakecache txt", "final_sentence": "is none then the build type will be inferred from cmakecache txt"}
{"comment_sentence_id": 513, "class": "MigrationGraph", "comment_sentence": "this is to support the squash feature.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this is to support the squash feature", "final_sentence": "this is to support the squash feature"}
{"comment_sentence_id": 1588, "class": "BooleanArray", "comment_sentence": "parameters", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "parameters", "final_sentence": "parameters"}
{"comment_sentence_id": 1706, "class": "CategoricalIndex", "comment_sentence": "also,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "also", "final_sentence": "also"}
{"comment_sentence_id": 963, "class": "Audio", "comment_sentence": "# can also do stereo or more channels", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "can also do stereo or more channels", "final_sentence": "can also do stereo or more channels"}
{"comment_sentence_id": 4690, "class": "ConstantPad3d", "comment_sentence": "m nn^constantpad3d 3, 3, 6, 6, 0, 1 , 35", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "m nn constantpad3d 3 3 6 6 0 1 35", "final_sentence": "m nn constantpad3d 3 3 6 6 0 1 35"}
{"comment_sentence_id": 1438, "class": "EncryptedIntDict", "comment_sentence": "encrypteddict which only deals in signed 64 bit int values.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "encrypteddict which only deals in signed 64 bit int values", "final_sentence": "encrypteddict which only deals in signed 64 bit int values"}
{"comment_sentence_id": 2542, "class": "CookieConflictError", "comment_sentence": "there are two cookies that meet the criteria specified in the cookie jar.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "there are two cookies that meet the criteria specified in the cookie jar", "final_sentence": "there are two cookies that meet the criteria specified in the cookie jar"}
{"comment_sentence_id": 3222, "class": "MemoizedZipManifests", "comment_sentence": "memoized zipfile manifests.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "memoized zipfile manifests", "final_sentence": "memoized zipfile manifests"}
{"comment_sentence_id": 2053, "class": "PlotAccessor", "comment_sentence": "specify relative alignments for bar plot layout.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "specify relative alignments for bar plot layout", "final_sentence": "specify relative alignments for bar plot layout"}
{"comment_sentence_id": 4344, "class": "BaseTestCase", "comment_sentence": "base class used for all tensorboard tests", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "base class used for all tensorboard tests", "final_sentence": "base class used for all tensorboard tests"}
{"comment_sentence_id": 667, "class": "Operation", "comment_sentence": "base class for migration operations.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "base class for migration operations", "final_sentence": "base class for migration operations"}
{"comment_sentence_id": 3240, "class": "Module_six_moves_urllib_parse", "comment_sentence": "lazy loading of moved objects in six^moves.urllib parse", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "lazy loading of moved objects in six moves urllib parse", "final_sentence": "lazy loading of moved objects in six moves urllib parse"}
{"comment_sentence_id": 212, "class": "BaseUpdateView", "comment_sentence": "base view for updating an existing object.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "base view for updating an existing object", "final_sentence": "base view for updating an existing object"}
{"comment_sentence_id": 119, "class": "BaseCommand", "comment_sentence": "parsing work in handle and then delegate from it to more", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "parsing work in handle and then delegate from it to more", "final_sentence": "parsing work in handle and then delegate from it to more"}
{"comment_sentence_id": 613, "class": "MultiValueDict", "comment_sentence": "single name value pairs.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "single name value pairs", "final_sentence": "single name value pairs"}
{"comment_sentence_id": 4305, "class": "AdaptiveMaxPool3d", "comment_sentence": "useful to pass to nn^maxunpool3d.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "useful to pass to nn maxunpool3d", "final_sentence": "useful to pass to nn maxunpool3d"}
{"comment_sentence_id": 66, "class": "AutoFieldMeta", "comment_sentence": "in many areas django also relies on using isinstance to check for an", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "in many areas django also relies on using isinstance to check for an", "final_sentence": "in many areas django also relies on using isinstance to check for an"}
{"comment_sentence_id": 1671, "class": "CategoricalDtype", "comment_sentence": "2:00 AM", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "2 00 AM", "final_sentence": "2 00 AM"}
{"comment_sentence_id": 5692, "class": "Unfold", "comment_sentence": "the total number of such blocks", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "the total number of such blocks", "final_sentence": "the total number of such blocks"}
{"comment_sentence_id": 1602, "class": "BooleanArray", "comment_sentence": "examples", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "examples", "final_sentence": "examples"}
{"comment_sentence_id": 583, "class": "MigrationWriter", "comment_sentence": "of the migration file from it.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "of the migration file from it", "final_sentence": "of the migration file from it"}
{"comment_sentence_id": 3477, "class": "PacifyFlushWrapper", "comment_sentence": "other cleanup code, and the case where the underlying file is not a broken", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "other cleanup code and the case where the underlying file is not a broken", "final_sentence": "other cleanup code and the case where the underlying file is not a broken"}
{"comment_sentence_id": 4142, "class": "ZipResourceFinder", "comment_sentence": "resource finder for resources in ^zip files.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "resource finder for resources in zip files", "final_sentence": "resource finder for resources in zip files"}
{"comment_sentence_id": 3404, "class": "Option", "comment_sentence": "if it was prompted for.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if it was prompted for", "final_sentence": "if it was prompted for"}
{"comment_sentence_id": 2493, "class": "ConnectionError", "comment_sentence": "a connection error occurred.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a connection error occurred", "final_sentence": "a connection error occurred"}
{"comment_sentence_id": 593, "class": "MultiPartParser", "comment_sentence": "multivaluedict^parse reads the input stream in chunk size chunks", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "multivaluedict parse reads the input stream in chunk size chunks", "final_sentence": "multivaluedict parse reads the input stream in chunk size chunks"}
{"comment_sentence_id": 3096, "class": "Markup", "comment_sentence": "it has the same methods as that type, but", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "it has the same methods as that type but", "final_sentence": "it has the same methods as that type but"}
{"comment_sentence_id": 3082, "class": "Markup", "comment_sentence": "markup 42", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "markup 42", "final_sentence": "markup 42"}
{"comment_sentence_id": 1669, "class": "CategoricalDtype", "comment_sentence": "12:00 AM", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "12 00 AM", "final_sentence": "12 00 AM"}
{"comment_sentence_id": 3181, "class": "MemcachedBytecodeCache", "comment_sentence": "timeout the timeout of the key.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "timeout the timeout of the key", "final_sentence": "timeout the timeout of the key"}
{"comment_sentence_id": 4160, "class": "_OpNamespace", "comment_sentence": "torch^get operation , a function bound from c , and then in a similar", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "torch get operation a function bound from c and then in a similar", "final_sentence": "torch get operation a function bound from c and then in a similar"}
{"comment_sentence_id": 2497, "class": "Context_", "comment_sentence": "the template context holds the variables of a template.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the template context holds the variables of a template", "final_sentence": "the template context holds the variables of a template"}
{"comment_sentence_id": 1579, "class": "BooleanArray", "comment_sentence": "see ref boolean^kleene for more.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "see ref boolean kleene for more", "final_sentence": "see ref boolean kleene for more"}
{"comment_sentence_id": 1598, "class": "BooleanArray", "comment_sentence": "methods", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "methods", "final_sentence": "methods"}
{"comment_sentence_id": 4298, "class": "AdaptiveMaxPool3d", "comment_sentence": "the number of output features is equal to the number of input planes.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the number of output features is equal to the number of input planes", "final_sentence": "the number of output features is equal to the number of input planes"}
{"comment_sentence_id": 1055, "class": "DummyMod", "comment_sentence": "a namespace must be assigned to the module s dict .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a namespace must be assigned to the module s dict", "final_sentence": "a namespace must be assigned to the module s dict"}
{"comment_sentence_id": 4300, "class": "AdaptiveMaxPool3d", "comment_sentence": "output size the target output size of the image of the form d x h x w.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "output size the target output size of the image of the form d x h x w", "final_sentence": "output size the target output size of the image of the form d x h x w"}
{"comment_sentence_id": 2501, "class": "Context_", "comment_sentence": "automatically at various stages of the template evaluation and should not", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "automatically at various stages of the template evaluation and should not", "final_sentence": "automatically at various stages of the template evaluation and should not"}
{"comment_sentence_id": 1606, "class": "BooleanArray", "comment_sentence": "true, false, na", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "true false na", "final_sentence": "true false na"}
{"comment_sentence_id": 5222, "class": "FisherSnedecor", "comment_sentence": "m^sample # fisher snedecor distributed with df1 1 and df2 2", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "m sample fisher snedecor distributed with df1 1 and df2 2", "final_sentence": "m sample fisher snedecor distributed with df1 1 and df2 2"}
{"comment_sentence_id": 2442, "class": "CaseInsensitiveDict", "comment_sentence": "mutablemapping as well as dict s copy .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "mutablemapping as well as dict s copy", "final_sentence": "mutablemapping as well as dict s copy"}
{"comment_sentence_id": 5254, "class": "LBFGS", "comment_sentence": "param bytes history size 1 bytes .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "param bytes history size 1 bytes", "final_sentence": "param bytes history size 1 bytes"}
{"comment_sentence_id": 5685, "class": "Unfold", "comment_sentence": "this operation flattens", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this operation flattens", "final_sentence": "this operation flattens"}
{"comment_sentence_id": 3408, "class": "Option", "comment_sentence": "input.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "input", "final_sentence": "input"}
{"comment_sentence_id": 2082, "class": "PlotAccessor", "comment_sentence": "returns", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "returns", "final_sentence": "returns"}
{"comment_sentence_id": 3414, "class": "Option", "comment_sentence": "this is set to a boolean automatically if", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "this is set to a boolean automatically if", "final_sentence": "this is set to a boolean automatically if"}
{"comment_sentence_id": 1580, "class": "BooleanArray", "comment_sentence": "to construct an booleanarray from generic array like input, use", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "to construct an booleanarray from generic array like input use", "final_sentence": "to construct an booleanarray from generic array like input use"}
{"comment_sentence_id": 2546, "class": "DataViewSequence", "comment_sentence": "a sequence of data views.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "a sequence of data views", "final_sentence": "a sequence of data views"}
{"comment_sentence_id": 2, "class": "AccessMixin", "comment_sentence": "functionality.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "functionality", "final_sentence": "functionality"}
{"comment_sentence_id": 3416, "class": "Option", "comment_sentence": "param multiple if this is set to true then the argument is accepted", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "param multiple if this is set to true then the argument is accepted", "final_sentence": "param multiple if this is set to true then the argument is accepted"}
{"comment_sentence_id": 2068, "class": "PlotAccessor", "comment_sentence": "when using a secondary y axis, automatically mark the column", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "when using a secondary y axis automatically mark the column", "final_sentence": "when using a secondary y axis automatically mark the column"}
{"comment_sentence_id": 5264, "class": "LBFGS", "comment_sentence": "default 1e 5 .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "default 1e 5", "final_sentence": "default 1e 5"}
{"comment_sentence_id": 1647, "class": "CategoricalDtype", "comment_sentence": "categories sequence, optional", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "categories sequence optional", "final_sentence": "categories sequence optional"}
{"comment_sentence_id": 3386, "class": "Option", "comment_sentence": "have some extra features that arguments don t have.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "have some extra features that arguments don t have", "final_sentence": "have some extra features that arguments don t have"}
{"comment_sentence_id": 1166, "class": "TermColors", "comment_sentence": "this class should be used as a mixin for building color schemes.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "this class should be used as a mixin for building color schemes", "final_sentence": "this class should be used as a mixin for building color schemes"}
{"comment_sentence_id": 4372, "class": "BatchNorm1d", "comment_sentence": "because the batch normalization is done over the c dimension, computing statistics", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "because the batch normalization is done over the c dimension computing statistics", "final_sentence": "because the batch normalization is done over the c dimension computing statistics"}
{"comment_sentence_id": 5337, "class": "MultiLabelMarginLoss", "comment_sentence": "size average bool, optional deprecated see attr reduction .", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "size average bool optional deprecated see attr reduction", "final_sentence": "size average bool optional deprecated see attr reduction"}
{"comment_sentence_id": 2080, "class": "PlotAccessor", "comment_sentence": "kwargs", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "kwargs", "final_sentence": "kwargs"}
{"comment_sentence_id": 669, "class": "Operation", "comment_sentence": "see db migrations state^py to represent what it performs, as well", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "see db migrations state py to represent what it performs as well", "final_sentence": "see db migrations state py to represent what it performs as well"}
{"comment_sentence_id": 4222, "class": "Adadelta", "comment_sentence": "to the parameters default 10", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "to the parameters default 10", "final_sentence": "to the parameters default 10"}
{"comment_sentence_id": 4129, "class": "UndefinedEnvironmentName", "comment_sentence": "environment.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "environment", "final_sentence": "environment"}
{"comment_sentence_id": 1713, "class": "CategoricalIndex", "comment_sentence": "if categories are given, values not in", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if categories are given values not in", "final_sentence": "if categories are given values not in"}
{"comment_sentence_id": 5472, "class": "Poisson", "comment_sentence": "args", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "args", "final_sentence": "args"}
{"comment_sentence_id": 4376, "class": "BatchNorm1d", "comment_sentence": "math n, c, l or math l from input of size math n, l", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "math n c l or math l from input of size math n l", "final_sentence": "math n c l or math l from input of size math n l"}
{"comment_sentence_id": 5777, "class": "Unfold", "comment_sentence": "torch^nn.functional^conv2d inp, w out ^abs ^max", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "torch nn functional conv2d inp w out abs max", "final_sentence": "torch nn functional conv2d inp w out abs max"}
{"comment_sentence_id": 3813, "class": "Retry", "comment_sentence": "or per request which overrides the default for the pool", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "or per request which overrides the default for the pool", "final_sentence": "or per request which overrides the default for the pool"}
{"comment_sentence_id": 4135, "class": "UnlockError", "comment_sentence": "except error", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "except error", "final_sentence": "except error"}
{"comment_sentence_id": 5265, "class": "LBFGS", "comment_sentence": "tolerance change float termination tolerance on function", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "tolerance change float termination tolerance on function", "final_sentence": "tolerance change float termination tolerance on function"}
{"comment_sentence_id": 2371, "class": "_FileInFile", "comment_sentence": "object.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "object", "final_sentence": "object"}
{"comment_sentence_id": 3681, "class": "PoolManager", "comment_sentence": "len manager^pools", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "len manager pools", "final_sentence": "len manager pools"}
{"comment_sentence_id": 4374, "class": "BatchNorm1d", "comment_sentence": "args", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "args", "final_sentence": "args"}
{"comment_sentence_id": 4112, "class": "TokenStreamIterator", "comment_sentence": "until the eof token is reached.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "until the eof token is reached", "final_sentence": "until the eof token is reached"}
{"comment_sentence_id": 2211, "class": "SelectNSeries", "comment_sentence": "parameters", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "parameters", "final_sentence": "parameters"}
{"comment_sentence_id": 5356, "class": "MultiLabelMarginLoss", "comment_sentence": "none no reduction will be applied,", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "none no reduction will be applied", "final_sentence": "none no reduction will be applied"}
{"comment_sentence_id": 3678, "class": "PoolManager", "comment_sentence": "r manager^request get , http google^com", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "r manager request get http google com", "final_sentence": "r manager request get http google com"}
{"comment_sentence_id": 1295, "class": "ConfigDict", "comment_sentence": "vodka liters , int, 12", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "vodka liters int 12", "final_sentence": "vodka liters int 12"}
{"comment_sentence_id": 4282, "class": "Adamax", "comment_sentence": "numerical stability default 1e 8", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "numerical stability default 1e 8", "final_sentence": "numerical stability default 1e 8"}
{"comment_sentence_id": 5199, "class": "Error", "comment_sentence": "each error in the report has an error message and a backtrace.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "each error in the report has an error message and a backtrace", "final_sentence": "each error in the report has an error message and a backtrace"}
{"comment_sentence_id": 2055, "class": "PlotAccessor", "comment_sentence": "default is 05", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "default is 05", "final_sentence": "default is 05"}
{"comment_sentence_id": 5682, "class": "Unfold", "comment_sentence": "consider a batched attr input tensor of shape math n, c, ,", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "consider a batched attr input tensor of shape math n c", "final_sentence": "consider a batched attr input tensor of shape math n c"}
{"comment_sentence_id": 1285, "class": "ConfigDict", "comment_sentence": "rules in place of the default value.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "rules in place of the default value", "final_sentence": "rules in place of the default value"}
{"comment_sentence_id": 5771, "class": "Unfold", "comment_sentence": "w torch^randn 2, 3, 4, 5", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "w torch randn 2 3 4 5", "final_sentence": "w torch randn 2 3 4 5"}
{"comment_sentence_id": 1427, "class": "ConfigureMailboxes", "comment_sentence": "if an account is specified, the mailbox will be assigned to that account", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "if an account is specified the mailbox will be assigned to that account", "final_sentence": "if an account is specified the mailbox will be assigned to that account"}
{"comment_sentence_id": 3505, "class": "ParseResultBytes", "comment_sentence": "compatibility shim for the urlparse^parseresultbytes object.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "compatibility shim for the urlparse parseresultbytes object", "final_sentence": "compatibility shim for the urlparse parseresultbytes object"}
{"comment_sentence_id": 1059, "class": "GeoJSON", "comment_sentence": "not an already serialized json string.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "not an already serialized json string", "final_sentence": "not an already serialized json string"}
{"comment_sentence_id": 1283, "class": "ConfigDict", "comment_sentence": "should be used with an empty list or dictionary as a default value.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "should be used with an empty list or dictionary as a default value", "final_sentence": "should be used with an empty list or dictionary as a default value"}
{"comment_sentence_id": 2059, "class": "PlotAccessor", "comment_sentence": "will be transposed to meet matplotlib s default layout.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "will be transposed to meet matplotlib s default layout", "final_sentence": "will be transposed to meet matplotlib s default layout"}
{"comment_sentence_id": 3410, "class": "Option", "comment_sentence": "the default is", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "the default is", "final_sentence": "the default is"}
{"comment_sentence_id": 1289, "class": "ConfigDict", "comment_sentence": "pot configdict rules potatoes how many potatoes?", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "pot configdict rules potatoes how many potatoes", "final_sentence": "pot configdict rules potatoes how many potatoes"}
{"comment_sentence_id": 50, "class": "AtomicTests", "comment_sentence": "tests for the atomic decorator and context manager.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "tests for the atomic decorator and context manager", "final_sentence": "tests for the atomic decorator and context manager"}
{"comment_sentence_id": 5121, "class": "EmbeddingBag", "comment_sentence": "offsets torch^longtensor 0,4", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "offsets torch longtensor 0 4", "final_sentence": "offsets torch longtensor 0 4"}
{"comment_sentence_id": 3262, "class": "NotAny", "comment_sentence": "may be constructed using the operator.", "partition": 1, "instance_type": 1, "category": "Usage", "pre_sentence": "may be constructed using the operator", "final_sentence": "may be constructed using the operator"}
{"comment_sentence_id": 589, "class": "ModelSignal", "comment_sentence": "of the app label^modelname form.", "partition": 1, "instance_type": 0, "category": "Usage", "pre_sentence": "of the app label modelname form", "final_sentence": "of the app label modelname form"}
